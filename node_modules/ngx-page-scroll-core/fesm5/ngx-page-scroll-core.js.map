{"version":3,"file":"ngx-page-scroll-core.js","sources":["ng://ngx-page-scroll-core/lib/page-scroll-instance.ts","ng://ngx-page-scroll-core/lib/providers/config.provider.ts","ng://ngx-page-scroll-core/lib/providers/ngx-page-scroll.service.ts","ng://ngx-page-scroll-core/lib/ngx-page-scroll-core.module.ts","ng://ngx-page-scroll-core/lib/types/page-scroll.config.ts"],"sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { PageScrollConfig } from './types/page-scroll.config';\nimport { PageScrollTarget } from './types/page-scroll-target';\nimport { PageScrollViews } from './types/page-scroll-view';\nimport { EasingLogic } from './types/easing-logic';\n\n/**\n * An Interface specifying the possible options to be passed into the newInstance() factory method\n */\nexport interface PageScrollOptions extends PageScrollConfig {\n  /**\n   * The document object of the current app\n   */\n  document: Document;\n\n  /**\n   * A specification of the DOM element to scroll to. Either a string referring to an\n   * element using a valid css selector (`#target`, `.class`, `div.class`) or a HTMLElement\n   * that is attached to the document's DOM tree.\n   */\n  scrollTarget: PageScrollTarget;\n\n  /**\n   * Array of HTMLElements or the body object that should be manipulated while performing\n   * the scroll animation.\n   */\n  scrollViews?: PageScrollViews[];\n\n  /**\n   * Maximum speed to be used for the scroll animation. Only taken\n   * into account of no duration is provided\n   */\n  speed?: number;\n\n  /**\n   * A listener to be called whenever the scroll animation stops\n   */\n  scrollFinishListener?: EventEmitter<boolean>;\n\n  namespace?: string;\n  verticalScrolling?: boolean;\n  duration?: number;\n  scrollOffset?: number;\n  advancedInlineOffsetCalculation?: boolean;\n  interruptEvents?: string[];\n  interruptKeys?: string[];\n  interruptible?: boolean;\n  scrollInView?: boolean;\n  easingLogic?: EasingLogic;\n}\n\n/**\n * Represents a scrolling action\n */\nexport class PageScrollInstance {\n\n  public pageScrollOptions: PageScrollOptions;\n\n  private isInlineScrolling: boolean;\n\n  /* The listener that this scroll instance attaches to the body to listen for interrupt events\n  We're keeping a reference to it so we can properly remove it when the animation finishes */\n  private interruptListener: EventListenerOrEventListenerObject;\n\n  /**\n   * These properties will be set/manipulated if the scroll animation starts\n   */\n  /* The initial value of the scrollTop or scrollLeft position when the animation starts */\n  public startScrollPosition = 0;\n  /* The target value of the scrollTop or scrollLeft position for the animation (aka \"the final destination\") */\n  public targetScrollPosition: number;\n  /* Difference between startScrollPosition and targetScrollPosition. Pre-calculated to minimize computations during animation */\n  public distanceToScroll: number;\n  /* The timestamp when the animation starts/got started */\n  public startTime: number;\n  /* The estimate end time of the animation, calculated by startTime + duration */\n  public endTime: number;\n  /* The duration a started animation takes. This may match the _duration or be adjusted due to the _speed option */\n  public executionDuration: number;\n  /* Whether an interrupt listener is attached to the body or not */\n  public interruptListenersAttached = false;\n\n  /* References to the timer instance that is used to perform the scroll animation to be\n   able to clear it on animation end*/\n  public timer: any = null;\n\n  /**\n   * Private constructor, requires the properties assumed to be the bare minimum.\n   * Use the factory methods to create instances:\n   *      {@link PageScrollService#create}\n   */\n  constructor(pageScrollOptions: PageScrollOptions) {\n    if (!pageScrollOptions.scrollViews || pageScrollOptions.scrollViews.length === 0) {\n      pageScrollOptions.scrollViews = [\n        pageScrollOptions.document.documentElement,\n        pageScrollOptions.document.body,\n        pageScrollOptions.document.body.parentNode,\n      ];\n      this.isInlineScrolling = false;\n    } else {\n      this.isInlineScrolling = true;\n    }\n\n    this.pageScrollOptions = pageScrollOptions;\n  }\n\n  private static getScrollingTargetPosition(pageScrollOptions: PageScrollOptions,\n                                            scrollTargetElement: HTMLElement): { top: number, left: number } {\n    const body = pageScrollOptions.document.body;\n    const docEl = pageScrollOptions.document.documentElement;\n\n    const windowPageYOffset: number = pageScrollOptions.document.defaultView &&\n      pageScrollOptions.document.defaultView.pageYOffset || undefined;\n    const windowPageXOffset: number = pageScrollOptions.document.defaultView &&\n      pageScrollOptions.document.defaultView.pageXOffset || undefined;\n\n    const scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;\n    const scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;\n\n    const clientTop = docEl.clientTop || body.clientTop || 0;\n    const clientLeft = docEl.clientLeft || body.clientLeft || 0;\n\n    if (scrollTargetElement === undefined || scrollTargetElement === null) {\n      // No element found, so return the current position to not cause any change in scroll position\n      return {top: scrollTop, left: scrollLeft};\n    }\n    const box = scrollTargetElement.getBoundingClientRect();\n\n    const top = box.top + scrollTop - clientTop;\n    const left = box.left + scrollLeft - clientLeft;\n\n    return {top: Math.round(top), left: Math.round(left)};\n  }\n\n  private static getInlineScrollingTargetPosition(pageScrollOptions: PageScrollOptions,\n                                                  scrollTargetElement: HTMLElement): { top: number, left: number } {\n    const position = {top: scrollTargetElement.offsetTop, left: scrollTargetElement.offsetLeft};\n    if (pageScrollOptions.advancedInlineOffsetCalculation && pageScrollOptions.scrollViews.length === 1) {\n      const accumulatedParentsPos = {top: 0, left: 0};\n      // not named window to make sure we're not getting the global window variable by accident\n      const theWindow = scrollTargetElement.ownerDocument.defaultView;\n      let parentFound = false;\n\n      // Start parent is the immediate parent\n      let parent = scrollTargetElement.parentElement;\n\n      // Iterate upwards all parents\n      while (!parentFound && parent !== undefined && parent !== null) {\n        if (theWindow.getComputedStyle(parent).getPropertyValue('position') === 'relative') {\n          accumulatedParentsPos.top += parent.offsetTop;\n          accumulatedParentsPos.left += parent.offsetLeft;\n        }\n        // Next iteration\n        parent = parent.parentElement;\n        parentFound = parent === pageScrollOptions.scrollViews[0];\n      }\n      if (parentFound) {\n        // Only use the results if we found the parent, otherwise we accumulated too much anyway\n        position.top += accumulatedParentsPos.top;\n        position.left += accumulatedParentsPos.left;\n      } else {\n        /* TODO Uncomment\n        if (PageScrollConfig._logLevel >= 2 || (PageScrollConfig._logLevel >= 1 && isDevMode())) {\n          console.warn('Unable to find nested scrolling targets parent!');\n        }*/\n      }\n    }\n\n    return position;\n  }\n\n  public getScrollPropertyValue(scrollingView: any): number {\n    if (!this.pageScrollOptions.verticalScrolling) {\n      return scrollingView.scrollLeft;\n    }\n\n    return scrollingView.scrollTop;\n  }\n\n  public getScrollClientPropertyValue(scrollingView: any): number {\n    if (!this.pageScrollOptions.verticalScrolling) {\n      return scrollingView.clientWidth;\n    }\n\n    return scrollingView.clientHeight;\n  }\n\n  /**\n   * Extract the exact location of the scrollTarget element.\n   *\n   * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be\n   * a string like \"#heading2\", then this method returns the corresponding DOM element for that id.\n   *\n   */\n  public extractScrollTargetPosition(): { top: number, left: number } {\n    const scrollTargetElement = this.getScrollTargetElement();\n\n    if (scrollTargetElement === null || scrollTargetElement === undefined) {\n      // Scroll target not found\n      return {top: NaN, left: NaN};\n    }\n\n    if (this.isInlineScrolling) {\n      return PageScrollInstance.getInlineScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);\n    }\n\n    return PageScrollInstance.getScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);\n  }\n\n  /**\n   * Get the top offset of the scroll animation.\n   * This automatically takes the offset location of the scrolling container/scrolling view\n   * into account (for nested/inline scrolling).\n   */\n  public getCurrentOffset(): number {\n    return this.pageScrollOptions.scrollOffset;\n  }\n\n  /**\n   * Sets the \"scrollTop\" or \"scrollLeft\" property for all scrollViews to the provided value\n   * @return true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.\n   *          false if it failed for all ScrollViews, meaning that we should stop the animation\n   *          (probably because we're at the end of the scrolling region)\n   */\n  public setScrollPosition(position: number): boolean {\n    // Set the new scrollTop/scrollLeft to all scrollViews elements\n    return this.pageScrollOptions.scrollViews.reduce((oneAlreadyWorked: any, scrollingView: any) => {\n      const startScrollPropertyValue = this.getScrollPropertyValue(scrollingView);\n      if (scrollingView && startScrollPropertyValue !== undefined && startScrollPropertyValue !== null) {\n        const scrollDistance = Math.abs(startScrollPropertyValue - position);\n\n        // The movement we need to perform is less than 2px\n        // This we consider a small movement which some browser may not perform when\n        // changing the scrollTop/scrollLeft property\n        // Thus in this cases we do not stop the scroll animation, although setting the\n        // scrollTop/scrollLeft value \"fails\"\n        const isSmallMovement = scrollDistance < this.pageScrollOptions._minScrollDistance;\n\n        if (!this.pageScrollOptions.verticalScrolling) {\n          scrollingView.scrollLeft = position;\n        } else {\n          scrollingView.scrollTop = position;\n        }\n\n        // Return true if setting the new scrollTop/scrollLeft value worked\n        // We consider that it worked if the new scrollTop/scrollLeft value is closer to the\n        // desired scrollTop/scrollLeft than before (it might not be exactly the value we\n        // set due to dpi or rounding irregularities)\n        if (isSmallMovement || scrollDistance > Math.abs(this.getScrollPropertyValue(scrollingView) - position)) {\n          return true;\n        }\n      }\n\n      return oneAlreadyWorked;\n    }, false);\n  }\n\n  /**\n   * Trigger firing a animation finish event\n   * @param value Whether the animation finished at the target (true) or got interrupted (false)\n   */\n  public fireEvent(value: boolean): void {\n    if (this.pageScrollOptions.scrollFinishListener) {\n      this.pageScrollOptions.scrollFinishListener.emit(value);\n    }\n  }\n\n  /**\n   * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter\n   * will be called if any of the attached events is fired.\n   *\n   * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.\n   */\n  public attachInterruptListeners(interruptReporter: InterruptReporter): void {\n    if (this.interruptListenersAttached) {\n      // Detach possibly existing listeners first\n      this.detachInterruptListeners();\n    }\n    this.interruptListener = (event: Event): void => {\n      interruptReporter.report(event, this);\n    };\n    this.pageScrollOptions.interruptEvents.forEach(\n      (event: string) => this.pageScrollOptions.document.body.addEventListener(event, this.interruptListener)\n    );\n    this.interruptListenersAttached = true;\n  }\n\n  /**\n   * Remove event listeners from the body and stop listening for events that might be treated as \"animation\n   * interrupt\" events.\n   */\n  public detachInterruptListeners(): void {\n    this.pageScrollOptions.interruptEvents.forEach(\n      (event: string) => this.pageScrollOptions.document.body.removeEventListener(event, this.interruptListener)\n    );\n    this.interruptListenersAttached = false;\n  }\n\n  private getScrollTargetElement(): HTMLElement {\n    if (typeof this.pageScrollOptions.scrollTarget === 'string') {\n      const targetSelector = <string>this.pageScrollOptions.scrollTarget;\n      if (targetSelector.match(/^#[^\\s]+$/g) !== null) {\n        // It's an id selector and a valid id, as it does not contain any white space characters\n\n        return this.pageScrollOptions.document.getElementById(targetSelector.substr(1));\n      }\n\n      return <HTMLElement>this.pageScrollOptions.document.querySelector(targetSelector);\n    }\n\n    return <HTMLElement>this.pageScrollOptions.scrollTarget;\n  }\n}\n\n/**\n * An Interface a listener should implement to be notified about possible interrupt events\n * that happened due to user interaction while a scroll animation takes place.\n *\n * The PageScrollService provides an implementation to a PageScrollInstance to be notified\n * about scroll animation interrupts and stop related animations.\n */\nexport interface InterruptReporter {\n  report(event: Event, pageScrollInstance: PageScrollInstance): void;\n}\n","import { InjectionToken } from '@angular/core';\nimport { PageScrollConfig } from '../types/page-scroll.config';\n\nexport const NGXPS_CONFIG = new InjectionToken<PageScrollConfig>('ngxps_config');\n\nexport const defaultPageScrollConfig: PageScrollConfig = {\n  _interval: 10,\n  _minScrollDistance: 2,\n  _logLevel: 1,\n  namespace: 'default',\n  verticalScrolling: true,\n  duration: 1250,\n  scrollOffset: 0,\n  advancedInlineOffsetCalculation: false,\n  interruptEvents: ['mousedown', 'wheel', 'DOMMouseScroll', 'mousewheel', 'keyup', 'touchmove'],\n  interruptKeys: [' ', 'Escape', 'Tab', 'Enter', 'PageUp', 'PageDown', 'Home', 'End', 'ArrowUp', 'ArrowRight', 'ArrowLeft', 'ArrowDown'],\n  interruptible: true,\n  scrollInView: true,\n  easingLogic: (t: number, b: number, c: number, d: number): number => {\n    // Linear easing\n    return c * t / d + b;\n  },\n};\n","import { Inject, Injectable, isDevMode } from '@angular/core';\n\nimport { PageScrollConfig } from '../types/page-scroll.config';\nimport { InterruptReporter, PageScrollInstance, PageScrollOptions } from '../page-scroll-instance';\nimport { defaultPageScrollConfig, NGXPS_CONFIG } from './config.provider';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageScrollService {\n  private static instanceCounter = 0;\n\n  private readonly config: PageScrollConfig;\n\n  private runningInstances: PageScrollInstance[] = [];\n\n  private onInterrupted: InterruptReporter = {\n    report: (event: Event, pageScrollInstance: PageScrollInstance): void => {\n      if (!pageScrollInstance.pageScrollOptions.interruptible) {\n        // Non-interruptible anyway, so do not stop anything\n        return;\n      }\n\n      let shouldStop = true;\n\n      if (event.type === 'keyup') {\n        // Only stop if specific keys have been pressed, for all others don't stop anything\n        if (this.config.interruptKeys.indexOf((<KeyboardEvent>event).key) === -1) {\n          // The pressed key is not in the list of interrupting keys\n          shouldStop = false;\n        }\n      } else if (event.type === 'mousedown') {\n        // For mousedown events we only stop the scroll animation of the mouse has\n        // been clicked inside the scrolling container\n        if (!pageScrollInstance.pageScrollOptions.scrollViews.some(scrollingView => scrollingView.contains(event.target as Node))) {\n          // Mouse clicked an element which is not inside any of the the scrolling containers\n          shouldStop = false;\n        }\n      }\n\n      if (shouldStop) {\n        this.stopAll(pageScrollInstance.pageScrollOptions.namespace);\n      }\n    },\n  };\n\n  private stopInternal(interrupted: boolean, pageScrollInstance: PageScrollInstance): boolean {\n    const index: number = this.runningInstances.indexOf(pageScrollInstance);\n    if (index >= 0) {\n      this.runningInstances.splice(index, 1);\n    }\n\n    if (pageScrollInstance.interruptListenersAttached) {\n      pageScrollInstance.detachInterruptListeners();\n    }\n\n    if (pageScrollInstance.timer) {\n      // Clear/Stop the timer\n      clearInterval(pageScrollInstance.timer);\n      // Clear the reference to this timer\n      pageScrollInstance.timer = undefined;\n      pageScrollInstance.fireEvent(!interrupted);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public create(options: PageScrollOptions): PageScrollInstance {\n    return new PageScrollInstance({...this.config, ...options} as PageScrollOptions);\n  }\n\n  /**\n   * Start a scroll animation. All properties of the animation are stored in the given {@link PageScrollInstance} object.\n   *\n   * This is the core functionality of the whole library.\n   */\n  // tslint:disable-next-line:cyclomatic-complexity\n  public start(pageScrollInstance: PageScrollInstance): void {\n    // Merge the default options in the pageScrollInstance options\n    pageScrollInstance.pageScrollOptions = {...this.config, ...pageScrollInstance.pageScrollOptions} as PageScrollOptions;\n\n    // Stop all possibly running scroll animations in the same namespace\n    this.stopAll(pageScrollInstance.pageScrollOptions.namespace);\n\n    if (pageScrollInstance.pageScrollOptions.scrollViews === null || pageScrollInstance.pageScrollOptions.scrollViews.length === 0) {\n      // No scrollViews specified, thus we can't animate anything\n      if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && isDevMode())) {\n        console.warn('No scrollViews specified, thus ngx-page-scroll does not know which DOM elements to scroll');\n      }\n\n      return;\n    }\n\n    let startScrollPositionFound = false;\n    let scrollRange = pageScrollInstance.getScrollClientPropertyValue(pageScrollInstance.pageScrollOptions.scrollViews[0]);\n    // Reset start scroll position to 0. If any of the scrollViews has a different one, it will be extracted next\n    pageScrollInstance.startScrollPosition = 0;\n\n    // Get the start scroll position from the scrollViews (e.g. if the user already scrolled down the content)\n    pageScrollInstance.pageScrollOptions.scrollViews.forEach(scrollingView => {\n      if (scrollingView === undefined || scrollingView === null) {\n        return;\n      }\n      // Get the scrollTop or scrollLeft value of the first scrollingView that returns a value for its \"scrollTop\"\n      // or \"scrollLeft\" property that is not undefined and unequal to 0\n\n      const scrollPosition = pageScrollInstance.getScrollPropertyValue(scrollingView);\n      if (!startScrollPositionFound && scrollPosition) {\n        // We found a scrollingView that does not have scrollTop or scrollLeft 0\n\n        // Return the scroll position value, as this will be our startScrollPosition\n        pageScrollInstance.startScrollPosition = scrollPosition;\n        startScrollPositionFound = true;\n\n        // Remember te scrollRange of this scrollingView\n        scrollRange = pageScrollInstance.getScrollClientPropertyValue(scrollingView);\n      }\n    });\n\n    const pageScrollOffset = pageScrollInstance.getCurrentOffset();\n\n    // Calculate the target position that the scroll animation should go to\n\n    const scrollTargetPosition = pageScrollInstance.extractScrollTargetPosition();\n    pageScrollInstance.targetScrollPosition = Math.round(\n      (pageScrollInstance.pageScrollOptions.verticalScrolling ? scrollTargetPosition.top : scrollTargetPosition.left) - pageScrollOffset);\n\n    // Calculate the distance we need to go in total\n    pageScrollInstance.distanceToScroll = pageScrollInstance.targetScrollPosition - pageScrollInstance.startScrollPosition;\n\n    if (isNaN(pageScrollInstance.distanceToScroll)) {\n      // We weren't able to find the target position, maybe the element does not exist?\n\n      if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && isDevMode())) {\n        console.log('Scrolling not possible, as we can\\'t find the specified target');\n      }\n      pageScrollInstance.fireEvent(false);\n\n      return;\n    }\n\n    // We're at the final destination already\n    // OR we need to scroll down but are already at the end\n    // OR we need to scroll up but are at the top already\n    const allReadyAtDestination = Math.abs(pageScrollInstance.distanceToScroll) < pageScrollInstance.pageScrollOptions._minScrollDistance;\n\n    // Check how long we need to scroll if a speed option is given\n    // Default executionDuration is the specified duration\n    pageScrollInstance.executionDuration = pageScrollInstance.pageScrollOptions.duration;\n    // Maybe we need to pay attention to the speed option?\n    if ((pageScrollInstance.pageScrollOptions.speed !== undefined && pageScrollInstance.pageScrollOptions.speed !== null) &&\n      (pageScrollInstance.pageScrollOptions.duration === undefined || pageScrollInstance.pageScrollOptions.duration === null)) {\n      // Speed option is set and no duration => calculate duration based on speed and scroll distance\n      pageScrollInstance.executionDuration =\n        Math.abs(pageScrollInstance.distanceToScroll) / pageScrollInstance.pageScrollOptions.speed * 1000;\n    }\n\n    // We should go there directly, as our \"animation\" would have one big step\n    // only anyway and this way we save the interval stuff\n    const tooShortInterval = pageScrollInstance.executionDuration <= pageScrollInstance.pageScrollOptions._interval;\n\n    if (allReadyAtDestination || tooShortInterval) {\n      if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && isDevMode())) {\n        if (allReadyAtDestination) {\n          console.log('Scrolling not possible, as we can\\'t get any closer to the destination');\n        } else {\n          console.log('Scroll duration shorter that interval length, jumping to target');\n        }\n      }\n      pageScrollInstance.setScrollPosition(pageScrollInstance.targetScrollPosition);\n      pageScrollInstance.fireEvent(true);\n\n      return;\n    }\n\n    if (!pageScrollInstance.pageScrollOptions.scrollInView) {\n      const alreadyInView = pageScrollInstance.targetScrollPosition > pageScrollInstance.startScrollPosition &&\n        pageScrollInstance.targetScrollPosition <= pageScrollInstance.startScrollPosition + scrollRange;\n      if (alreadyInView) {\n        if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && isDevMode())) {\n          console.log('Not scrolling, as target already in view');\n        }\n        pageScrollInstance.fireEvent(true);\n\n        return;\n      }\n    }\n\n    // Register the interrupt listeners if we want an interruptible scroll animation\n    if (pageScrollInstance.pageScrollOptions.interruptible) {\n      pageScrollInstance.attachInterruptListeners(this.onInterrupted);\n    }\n\n    // Let's get started, get the start time...\n    pageScrollInstance.startTime = new Date().getTime();\n    // .. and calculate the end time (when we need to finish at last)\n    pageScrollInstance.endTime = pageScrollInstance.startTime + pageScrollInstance.executionDuration;\n\n    pageScrollInstance.timer = setInterval((_pageScrollInstance: PageScrollInstance) => {\n      // Take the current time\n      const currentTime: number = new Date().getTime();\n\n      // Determine the new scroll position\n      let newScrollPosition: number;\n      let stopNow = false;\n      if (_pageScrollInstance.endTime <= currentTime) {\n        // We're over the time already, so go the targetScrollPosition (aka destination)\n        newScrollPosition = _pageScrollInstance.targetScrollPosition;\n        stopNow = true;\n      } else {\n        // Calculate the scroll position based on the current time using the easing function\n        newScrollPosition = Math.round(_pageScrollInstance.pageScrollOptions.easingLogic(\n          currentTime - _pageScrollInstance.startTime,\n          _pageScrollInstance.startScrollPosition,\n          _pageScrollInstance.distanceToScroll,\n          _pageScrollInstance.executionDuration));\n      }\n      if (this.config._logLevel >= 5 && isDevMode()) {\n        console.warn('Scroll Position: ' + newScrollPosition);\n      }\n      // Set the new scrollPosition to all scrollViews elements\n      if (!_pageScrollInstance.setScrollPosition(newScrollPosition)) {\n        // Setting the new scrollTop/scrollLeft value failed for all ScrollViews\n        // early stop the scroll animation to save resources\n        stopNow = true;\n      }\n\n      // At the end do the internal stop maintenance and fire the pageScrollFinish event\n      // (otherwise the event might arrive at \"too early\")\n      if (stopNow) {\n        this.stopInternal(false, _pageScrollInstance);\n      }\n\n    }, this.config._interval, pageScrollInstance);\n\n    // Register the instance as running one\n    this.runningInstances.push(pageScrollInstance);\n  }\n\n  public scroll(options: PageScrollOptions): void {\n    this.start(this.create(options));\n  }\n\n  /**\n   * Stop all running scroll animations. Optionally limit to stop only the ones of specific namespace.\n   */\n  public stopAll(namespace?: string): boolean {\n    if (this.runningInstances.length > 0) {\n      let stoppedSome = false;\n\n      for (let i = 0; i < this.runningInstances.length; ++i) {\n        const pageScrollInstance = this.runningInstances[i];\n        if (!namespace || pageScrollInstance.pageScrollOptions.namespace === namespace) {\n          stoppedSome = true;\n          this.stopInternal(true, pageScrollInstance);\n          // Decrease the counter, as we removed an item from the array we iterate over\n          i--;\n        }\n      }\n\n      return stoppedSome;\n    }\n\n    return false;\n  }\n\n  public stop(pageScrollInstance: PageScrollInstance): boolean {\n    return this.stopInternal(true, pageScrollInstance);\n  }\n\n  constructor(@Inject(NGXPS_CONFIG) customConfig: PageScrollConfig) {\n    this.config = {...defaultPageScrollConfig, ...customConfig};\n\n    if (PageScrollService.instanceCounter > 0 &&\n      (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && isDevMode()))) {\n      console.warn('An instance of PageScrollService already exists, usually ' +\n        'including one provider should be enough, so double check.');\n    }\n    PageScrollService.instanceCounter++;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { PageScrollService } from './providers/ngx-page-scroll.service';\nimport { NGXPS_CONFIG } from './providers/config.provider';\nimport { PageScrollConfig } from './types/page-scroll.config';\n\n@NgModule({\n  providers: [\n    PageScrollService,\n    {provide: NGXPS_CONFIG, useValue: {}},\n  ],\n})\nexport class NgxPageScrollCoreModule {\n  static forRoot(config?: PageScrollConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxPageScrollCoreModule,\n      providers: [PageScrollService, {provide: NGXPS_CONFIG, useValue: config}],\n    };\n  }\n}\n","import { EasingLogic } from './easing-logic';\n\nexport interface PageScrollConfig {\n\n  /**\n   * The number of milliseconds to wait till updating the scroll position again.\n   * Small amounts may produce smoother animations but require more processing power.\n   */\n  _interval?: number;\n\n  /**\n   * The amount of pixels that need to be between the current scrollTop/scrollLeft position\n   * and the target position the cause a scroll animation. In case distance is below\n   * this threshold, an immediate jump will be performed.\n   * Due to dpi or rounding irregularities in browsers floating point numbers for scrollTop/scrollLeft values\n   * are possible, making a === comparison of current scrollTop or scrollLeft and target scrollPosition error-prone.\n   */\n  _minScrollDistance?: number;\n\n  /**\n   * How many console logs should be emitted. Also influenced by angular mode (dev or prod mode)\n   * 0: No logs, neither in dev nor in prod mode\n   * 1: Animation errors in dev mode, no logs in prod mode\n   * 2: Animation errors in dev and prod mode\n   * 5: Animation errors in dev and all scroll position values that get set; animation errors in prod mode\n   */\n  _logLevel?: number;\n\n  /**\n   * Name of the default namespace.\n   */\n  namespace?: string;\n\n  /**\n   * Whether by default the scrolling should happen in vertical direction (by manipulating the scrollTop property)\n   * (= true; default) or in horizontal direction (by manipulating the scrollLeft property) (= false\n   */\n  verticalScrolling?: boolean;\n\n  /**\n   * The duration how long a scrollTo animation should last by default.\n   * May be overridden using the page-scroll-duration attribute on a single ngxPageScroll instance.\n   */\n  duration?: number;\n\n  /**\n   * The distance in pixels above scroll target where the animation should stop. Setting a positive number results in\n   * the scroll target being more in the middle of the screen, negative numbers will produce scrolling \"too far\"\n   */\n  scrollOffset?: number;\n\n  /**\n   * Whether by default for inline scroll animations the advanced offset calculation should take place (true) or\n   * not (false). Default is false.\n   * The advanced offset calculation will traverse the DOM tree upwards, starting at the scrollTarget, until it finds\n   * the scrollingView container element. Along the way the offset positions of the relative positioned\n   * (position: relative) elements will be taken into account for calculating the target elements position.\n   */\n  advancedInlineOffsetCalculation?: boolean;\n\n  /**\n   * The events that are listened to on the body to decide whether a scroll animation has been interfered/interrupted by the user\n   */\n  interruptEvents?: string[];\n\n  /**\n   * The keys that are considered to interrupt a scroll animation (mainly the arrow keys). All other key presses will not stop the\n   * scroll animation.\n   */\n  interruptKeys?: string[];\n\n  /**\n   * Whether a scroll animation should be interruptible by user interaction (true) or not (false). If the user performs an\n   * interrupting event while a scroll animation takes place, the scroll animation stops.\n   */\n  interruptible?: boolean;\n\n  /**\n   * Whether the scroll animation should take place if the target is already in the view (true). If set to false the scroll\n   * animation will not start, in case the target pixel is already inside the current view.\n   */\n  scrollInView?: boolean;\n\n  /**\n   * Easing logic to be applied when performing the scroll animation\n   */\n  easingLogic?: EasingLogic;\n}\n"],"names":[],"mappings":"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"}