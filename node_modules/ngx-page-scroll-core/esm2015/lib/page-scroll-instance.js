/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An Interface specifying the possible options to be passed into the newInstance() factory method
 * @record
 */
export function PageScrollOptions() { }
if (false) {
    /**
     * The document object of the current app
     * @type {?}
     */
    PageScrollOptions.prototype.document;
    /**
     * A specification of the DOM element to scroll to. Either a string referring to an
     * element using a valid css selector (`#target`, `.class`, `div.class`) or a HTMLElement
     * that is attached to the document's DOM tree.
     * @type {?}
     */
    PageScrollOptions.prototype.scrollTarget;
    /**
     * Array of HTMLElements or the body object that should be manipulated while performing
     * the scroll animation.
     * @type {?|undefined}
     */
    PageScrollOptions.prototype.scrollViews;
    /**
     * Maximum speed to be used for the scroll animation. Only taken
     * into account of no duration is provided
     * @type {?|undefined}
     */
    PageScrollOptions.prototype.speed;
    /**
     * A listener to be called whenever the scroll animation stops
     * @type {?|undefined}
     */
    PageScrollOptions.prototype.scrollFinishListener;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.namespace;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.verticalScrolling;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.duration;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.scrollOffset;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.advancedInlineOffsetCalculation;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.interruptEvents;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.interruptKeys;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.interruptible;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.scrollInView;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.easingLogic;
}
/**
 * Represents a scrolling action
 */
export class PageScrollInstance {
    /**
     * Private constructor, requires the properties assumed to be the bare minimum.
     * Use the factory methods to create instances:
     *      {\@link PageScrollService#create}
     * @param {?} pageScrollOptions
     */
    constructor(pageScrollOptions) {
        /**
         * These properties will be set/manipulated if the scroll animation starts
         */
        /* The initial value of the scrollTop or scrollLeft position when the animation starts */
        this.startScrollPosition = 0;
        /* Whether an interrupt listener is attached to the body or not */
        this.interruptListenersAttached = false;
        /* References to the timer instance that is used to perform the scroll animation to be
           able to clear it on animation end*/
        this.timer = null;
        if (!pageScrollOptions.scrollViews || pageScrollOptions.scrollViews.length === 0) {
            pageScrollOptions.scrollViews = [
                pageScrollOptions.document.documentElement,
                pageScrollOptions.document.body,
                pageScrollOptions.document.body.parentNode,
            ];
            this.isInlineScrolling = false;
        }
        else {
            this.isInlineScrolling = true;
        }
        this.pageScrollOptions = pageScrollOptions;
    }
    /**
     * @private
     * @param {?} pageScrollOptions
     * @param {?} scrollTargetElement
     * @return {?}
     */
    static getScrollingTargetPosition(pageScrollOptions, scrollTargetElement) {
        /** @type {?} */
        const body = pageScrollOptions.document.body;
        /** @type {?} */
        const docEl = pageScrollOptions.document.documentElement;
        /** @type {?} */
        const windowPageYOffset = pageScrollOptions.document.defaultView &&
            pageScrollOptions.document.defaultView.pageYOffset || undefined;
        /** @type {?} */
        const windowPageXOffset = pageScrollOptions.document.defaultView &&
            pageScrollOptions.document.defaultView.pageXOffset || undefined;
        /** @type {?} */
        const scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;
        /** @type {?} */
        const scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;
        /** @type {?} */
        const clientTop = docEl.clientTop || body.clientTop || 0;
        /** @type {?} */
        const clientLeft = docEl.clientLeft || body.clientLeft || 0;
        if (scrollTargetElement === undefined || scrollTargetElement === null) {
            // No element found, so return the current position to not cause any change in scroll position
            return { top: scrollTop, left: scrollLeft };
        }
        /** @type {?} */
        const box = scrollTargetElement.getBoundingClientRect();
        /** @type {?} */
        const top = box.top + scrollTop - clientTop;
        /** @type {?} */
        const left = box.left + scrollLeft - clientLeft;
        return { top: Math.round(top), left: Math.round(left) };
    }
    /**
     * @private
     * @param {?} pageScrollOptions
     * @param {?} scrollTargetElement
     * @return {?}
     */
    static getInlineScrollingTargetPosition(pageScrollOptions, scrollTargetElement) {
        /** @type {?} */
        const position = { top: scrollTargetElement.offsetTop, left: scrollTargetElement.offsetLeft };
        if (pageScrollOptions.advancedInlineOffsetCalculation && pageScrollOptions.scrollViews.length === 1) {
            /** @type {?} */
            const accumulatedParentsPos = { top: 0, left: 0 };
            // not named window to make sure we're not getting the global window variable by accident
            /** @type {?} */
            const theWindow = scrollTargetElement.ownerDocument.defaultView;
            /** @type {?} */
            let parentFound = false;
            // Start parent is the immediate parent
            /** @type {?} */
            let parent = scrollTargetElement.parentElement;
            // Iterate upwards all parents
            while (!parentFound && parent !== undefined && parent !== null) {
                if (theWindow.getComputedStyle(parent).getPropertyValue('position') === 'relative') {
                    accumulatedParentsPos.top += parent.offsetTop;
                    accumulatedParentsPos.left += parent.offsetLeft;
                }
                // Next iteration
                parent = parent.parentElement;
                parentFound = parent === pageScrollOptions.scrollViews[0];
            }
            if (parentFound) {
                // Only use the results if we found the parent, otherwise we accumulated too much anyway
                position.top += accumulatedParentsPos.top;
                position.left += accumulatedParentsPos.left;
            }
            else {
                /* TODO Uncomment
                if (PageScrollConfig._logLevel >= 2 || (PageScrollConfig._logLevel >= 1 && isDevMode())) {
                  console.warn('Unable to find nested scrolling targets parent!');
                }*/
            }
        }
        return position;
    }
    /**
     * @param {?} scrollingView
     * @return {?}
     */
    getScrollPropertyValue(scrollingView) {
        if (!this.pageScrollOptions.verticalScrolling) {
            return scrollingView.scrollLeft;
        }
        return scrollingView.scrollTop;
    }
    /**
     * @param {?} scrollingView
     * @return {?}
     */
    getScrollClientPropertyValue(scrollingView) {
        if (!this.pageScrollOptions.verticalScrolling) {
            return scrollingView.clientWidth;
        }
        return scrollingView.clientHeight;
    }
    /**
     * Extract the exact location of the scrollTarget element.
     *
     * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be
     * a string like "#heading2", then this method returns the corresponding DOM element for that id.
     *
     * @return {?}
     */
    extractScrollTargetPosition() {
        /** @type {?} */
        const scrollTargetElement = this.getScrollTargetElement();
        if (scrollTargetElement === null || scrollTargetElement === undefined) {
            // Scroll target not found
            return { top: NaN, left: NaN };
        }
        if (this.isInlineScrolling) {
            return PageScrollInstance.getInlineScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);
        }
        return PageScrollInstance.getScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);
    }
    /**
     * Get the top offset of the scroll animation.
     * This automatically takes the offset location of the scrolling container/scrolling view
     * into account (for nested/inline scrolling).
     * @return {?}
     */
    getCurrentOffset() {
        return this.pageScrollOptions.scrollOffset;
    }
    /**
     * Sets the "scrollTop" or "scrollLeft" property for all scrollViews to the provided value
     * @param {?} position
     * @return {?} true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.
     *          false if it failed for all ScrollViews, meaning that we should stop the animation
     *          (probably because we're at the end of the scrolling region)
     */
    setScrollPosition(position) {
        // Set the new scrollTop/scrollLeft to all scrollViews elements
        return this.pageScrollOptions.scrollViews.reduce((/**
         * @param {?} oneAlreadyWorked
         * @param {?} scrollingView
         * @return {?}
         */
        (oneAlreadyWorked, scrollingView) => {
            /** @type {?} */
            const startScrollPropertyValue = this.getScrollPropertyValue(scrollingView);
            if (scrollingView && startScrollPropertyValue !== undefined && startScrollPropertyValue !== null) {
                /** @type {?} */
                const scrollDistance = Math.abs(startScrollPropertyValue - position);
                // The movement we need to perform is less than 2px
                // This we consider a small movement which some browser may not perform when
                // changing the scrollTop/scrollLeft property
                // Thus in this cases we do not stop the scroll animation, although setting the
                // scrollTop/scrollLeft value "fails"
                /** @type {?} */
                const isSmallMovement = scrollDistance < this.pageScrollOptions._minScrollDistance;
                if (!this.pageScrollOptions.verticalScrolling) {
                    scrollingView.scrollLeft = position;
                }
                else {
                    scrollingView.scrollTop = position;
                }
                // Return true if setting the new scrollTop/scrollLeft value worked
                // We consider that it worked if the new scrollTop/scrollLeft value is closer to the
                // desired scrollTop/scrollLeft than before (it might not be exactly the value we
                // set due to dpi or rounding irregularities)
                if (isSmallMovement || scrollDistance > Math.abs(this.getScrollPropertyValue(scrollingView) - position)) {
                    return true;
                }
            }
            return oneAlreadyWorked;
        }), false);
    }
    /**
     * Trigger firing a animation finish event
     * @param {?} value Whether the animation finished at the target (true) or got interrupted (false)
     * @return {?}
     */
    fireEvent(value) {
        if (this.pageScrollOptions.scrollFinishListener) {
            this.pageScrollOptions.scrollFinishListener.emit(value);
        }
    }
    /**
     * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter
     * will be called if any of the attached events is fired.
     *
     * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.
     * @param {?} interruptReporter
     * @return {?}
     */
    attachInterruptListeners(interruptReporter) {
        if (this.interruptListenersAttached) {
            // Detach possibly existing listeners first
            this.detachInterruptListeners();
        }
        this.interruptListener = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            interruptReporter.report(event, this);
        });
        this.pageScrollOptions.interruptEvents.forEach((/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.pageScrollOptions.document.body.addEventListener(event, this.interruptListener)));
        this.interruptListenersAttached = true;
    }
    /**
     * Remove event listeners from the body and stop listening for events that might be treated as "animation
     * interrupt" events.
     * @return {?}
     */
    detachInterruptListeners() {
        this.pageScrollOptions.interruptEvents.forEach((/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.pageScrollOptions.document.body.removeEventListener(event, this.interruptListener)));
        this.interruptListenersAttached = false;
    }
    /**
     * @private
     * @return {?}
     */
    getScrollTargetElement() {
        if (typeof this.pageScrollOptions.scrollTarget === 'string') {
            /** @type {?} */
            const targetSelector = (/** @type {?} */ (this.pageScrollOptions.scrollTarget));
            if (targetSelector.match(/^#[^\s]+$/g) !== null) {
                // It's an id selector and a valid id, as it does not contain any white space characters
                return this.pageScrollOptions.document.getElementById(targetSelector.substr(1));
            }
            return (/** @type {?} */ (this.pageScrollOptions.document.querySelector(targetSelector)));
        }
        return (/** @type {?} */ (this.pageScrollOptions.scrollTarget));
    }
}
if (false) {
    /** @type {?} */
    PageScrollInstance.prototype.pageScrollOptions;
    /**
     * @type {?}
     * @private
     */
    PageScrollInstance.prototype.isInlineScrolling;
    /**
     * @type {?}
     * @private
     */
    PageScrollInstance.prototype.interruptListener;
    /**
     * These properties will be set/manipulated if the scroll animation starts
     * @type {?}
     */
    PageScrollInstance.prototype.startScrollPosition;
    /** @type {?} */
    PageScrollInstance.prototype.targetScrollPosition;
    /** @type {?} */
    PageScrollInstance.prototype.distanceToScroll;
    /** @type {?} */
    PageScrollInstance.prototype.startTime;
    /** @type {?} */
    PageScrollInstance.prototype.endTime;
    /** @type {?} */
    PageScrollInstance.prototype.executionDuration;
    /** @type {?} */
    PageScrollInstance.prototype.interruptListenersAttached;
    /** @type {?} */
    PageScrollInstance.prototype.timer;
}
/**
 * An Interface a listener should implement to be notified about possible interrupt events
 * that happened due to user interaction while a scroll animation takes place.
 *
 * The PageScrollService provides an implementation to a PageScrollInstance to be notified
 * about scroll animation interrupts and stop related animations.
 * @record
 */
export function InterruptReporter() { }
if (false) {
    /**
     * @param {?} event
     * @param {?} pageScrollInstance
     * @return {?}
     */
    InterruptReporter.prototype.report = function (event, pageScrollInstance) { };
}
//# sourceMappingURL=data:application/json;base64,