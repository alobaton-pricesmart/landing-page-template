/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function PageScrollConfig() { }
if (false) {
    /**
     * The number of milliseconds to wait till updating the scroll position again.
     * Small amounts may produce smoother animations but require more processing power.
     * @type {?|undefined}
     */
    PageScrollConfig.prototype._interval;
    /**
     * The amount of pixels that need to be between the current scrollTop/scrollLeft position
     * and the target position the cause a scroll animation. In case distance is below
     * this threshold, an immediate jump will be performed.
     * Due to dpi or rounding irregularities in browsers floating point numbers for scrollTop/scrollLeft values
     * are possible, making a === comparison of current scrollTop or scrollLeft and target scrollPosition error-prone.
     * @type {?|undefined}
     */
    PageScrollConfig.prototype._minScrollDistance;
    /**
     * How many console logs should be emitted. Also influenced by angular mode (dev or prod mode)
     * 0: No logs, neither in dev nor in prod mode
     * 1: Animation errors in dev mode, no logs in prod mode
     * 2: Animation errors in dev and prod mode
     * 5: Animation errors in dev and all scroll position values that get set; animation errors in prod mode
     * @type {?|undefined}
     */
    PageScrollConfig.prototype._logLevel;
    /**
     * Name of the default namespace.
     * @type {?|undefined}
     */
    PageScrollConfig.prototype.namespace;
    /**
     * Whether by default the scrolling should happen in vertical direction (by manipulating the scrollTop property)
     * (= true; default) or in horizontal direction (by manipulating the scrollLeft property) (= false
     * @type {?|undefined}
     */
    PageScrollConfig.prototype.verticalScrolling;
    /**
     * The duration how long a scrollTo animation should last by default.
     * May be overridden using the page-scroll-duration attribute on a single ngxPageScroll instance.
     * @type {?|undefined}
     */
    PageScrollConfig.prototype.duration;
    /**
     * The distance in pixels above scroll target where the animation should stop. Setting a positive number results in
     * the scroll target being more in the middle of the screen, negative numbers will produce scrolling "too far"
     * @type {?|undefined}
     */
    PageScrollConfig.prototype.scrollOffset;
    /**
     * Whether by default for inline scroll animations the advanced offset calculation should take place (true) or
     * not (false). Default is false.
     * The advanced offset calculation will traverse the DOM tree upwards, starting at the scrollTarget, until it finds
     * the scrollingView container element. Along the way the offset positions of the relative positioned
     * (position: relative) elements will be taken into account for calculating the target elements position.
     * @type {?|undefined}
     */
    PageScrollConfig.prototype.advancedInlineOffsetCalculation;
    /**
     * The events that are listened to on the body to decide whether a scroll animation has been interfered/interrupted by the user
     * @type {?|undefined}
     */
    PageScrollConfig.prototype.interruptEvents;
    /**
     * The keys that are considered to interrupt a scroll animation (mainly the arrow keys). All other key presses will not stop the
     * scroll animation.
     * @type {?|undefined}
     */
    PageScrollConfig.prototype.interruptKeys;
    /**
     * Whether a scroll animation should be interruptible by user interaction (true) or not (false). If the user performs an
     * interrupting event while a scroll animation takes place, the scroll animation stops.
     * @type {?|undefined}
     */
    PageScrollConfig.prototype.interruptible;
    /**
     * Whether the scroll animation should take place if the target is already in the view (true). If set to false the scroll
     * animation will not start, in case the target pixel is already inside the current view.
     * @type {?|undefined}
     */
    PageScrollConfig.prototype.scrollInView;
    /**
     * Easing logic to be applied when performing the scroll animation
     * @type {?|undefined}
     */
    PageScrollConfig.prototype.easingLogic;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1zY3JvbGwuY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXBhZ2Utc2Nyb2xsLWNvcmUvIiwic291cmNlcyI6WyJsaWIvdHlwZXMvcGFnZS1zY3JvbGwuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQSxzQ0FxRkM7Ozs7Ozs7SUEvRUMscUNBQW1COzs7Ozs7Ozs7SUFTbkIsOENBQTRCOzs7Ozs7Ozs7SUFTNUIscUNBQW1COzs7OztJQUtuQixxQ0FBbUI7Ozs7OztJQU1uQiw2Q0FBNEI7Ozs7OztJQU01QixvQ0FBa0I7Ozs7OztJQU1sQix3Q0FBc0I7Ozs7Ozs7OztJQVN0QiwyREFBMEM7Ozs7O0lBSzFDLDJDQUEyQjs7Ozs7O0lBTTNCLHlDQUF5Qjs7Ozs7O0lBTXpCLHlDQUF3Qjs7Ozs7O0lBTXhCLHdDQUF1Qjs7Ozs7SUFLdkIsdUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWFzaW5nTG9naWMgfSBmcm9tICcuL2Vhc2luZy1sb2dpYyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFnZVNjcm9sbENvbmZpZyB7XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgdGlsbCB1cGRhdGluZyB0aGUgc2Nyb2xsIHBvc2l0aW9uIGFnYWluLlxuICAgKiBTbWFsbCBhbW91bnRzIG1heSBwcm9kdWNlIHNtb290aGVyIGFuaW1hdGlvbnMgYnV0IHJlcXVpcmUgbW9yZSBwcm9jZXNzaW5nIHBvd2VyLlxuICAgKi9cbiAgX2ludGVydmFsPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgYW1vdW50IG9mIHBpeGVscyB0aGF0IG5lZWQgdG8gYmUgYmV0d2VlbiB0aGUgY3VycmVudCBzY3JvbGxUb3Avc2Nyb2xsTGVmdCBwb3NpdGlvblxuICAgKiBhbmQgdGhlIHRhcmdldCBwb3NpdGlvbiB0aGUgY2F1c2UgYSBzY3JvbGwgYW5pbWF0aW9uLiBJbiBjYXNlIGRpc3RhbmNlIGlzIGJlbG93XG4gICAqIHRoaXMgdGhyZXNob2xkLCBhbiBpbW1lZGlhdGUganVtcCB3aWxsIGJlIHBlcmZvcm1lZC5cbiAgICogRHVlIHRvIGRwaSBvciByb3VuZGluZyBpcnJlZ3VsYXJpdGllcyBpbiBicm93c2VycyBmbG9hdGluZyBwb2ludCBudW1iZXJzIGZvciBzY3JvbGxUb3Avc2Nyb2xsTGVmdCB2YWx1ZXNcbiAgICogYXJlIHBvc3NpYmxlLCBtYWtpbmcgYSA9PT0gY29tcGFyaXNvbiBvZiBjdXJyZW50IHNjcm9sbFRvcCBvciBzY3JvbGxMZWZ0IGFuZCB0YXJnZXQgc2Nyb2xsUG9zaXRpb24gZXJyb3ItcHJvbmUuXG4gICAqL1xuICBfbWluU2Nyb2xsRGlzdGFuY2U/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEhvdyBtYW55IGNvbnNvbGUgbG9ncyBzaG91bGQgYmUgZW1pdHRlZC4gQWxzbyBpbmZsdWVuY2VkIGJ5IGFuZ3VsYXIgbW9kZSAoZGV2IG9yIHByb2QgbW9kZSlcbiAgICogMDogTm8gbG9ncywgbmVpdGhlciBpbiBkZXYgbm9yIGluIHByb2QgbW9kZVxuICAgKiAxOiBBbmltYXRpb24gZXJyb3JzIGluIGRldiBtb2RlLCBubyBsb2dzIGluIHByb2QgbW9kZVxuICAgKiAyOiBBbmltYXRpb24gZXJyb3JzIGluIGRldiBhbmQgcHJvZCBtb2RlXG4gICAqIDU6IEFuaW1hdGlvbiBlcnJvcnMgaW4gZGV2IGFuZCBhbGwgc2Nyb2xsIHBvc2l0aW9uIHZhbHVlcyB0aGF0IGdldCBzZXQ7IGFuaW1hdGlvbiBlcnJvcnMgaW4gcHJvZCBtb2RlXG4gICAqL1xuICBfbG9nTGV2ZWw/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGRlZmF1bHQgbmFtZXNwYWNlLlxuICAgKi9cbiAgbmFtZXNwYWNlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGJ5IGRlZmF1bHQgdGhlIHNjcm9sbGluZyBzaG91bGQgaGFwcGVuIGluIHZlcnRpY2FsIGRpcmVjdGlvbiAoYnkgbWFuaXB1bGF0aW5nIHRoZSBzY3JvbGxUb3AgcHJvcGVydHkpXG4gICAqICg9IHRydWU7IGRlZmF1bHQpIG9yIGluIGhvcml6b250YWwgZGlyZWN0aW9uIChieSBtYW5pcHVsYXRpbmcgdGhlIHNjcm9sbExlZnQgcHJvcGVydHkpICg9IGZhbHNlXG4gICAqL1xuICB2ZXJ0aWNhbFNjcm9sbGluZz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBob3cgbG9uZyBhIHNjcm9sbFRvIGFuaW1hdGlvbiBzaG91bGQgbGFzdCBieSBkZWZhdWx0LlxuICAgKiBNYXkgYmUgb3ZlcnJpZGRlbiB1c2luZyB0aGUgcGFnZS1zY3JvbGwtZHVyYXRpb24gYXR0cmlidXRlIG9uIGEgc2luZ2xlIG5neFBhZ2VTY3JvbGwgaW5zdGFuY2UuXG4gICAqL1xuICBkdXJhdGlvbj86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGRpc3RhbmNlIGluIHBpeGVscyBhYm92ZSBzY3JvbGwgdGFyZ2V0IHdoZXJlIHRoZSBhbmltYXRpb24gc2hvdWxkIHN0b3AuIFNldHRpbmcgYSBwb3NpdGl2ZSBudW1iZXIgcmVzdWx0cyBpblxuICAgKiB0aGUgc2Nyb2xsIHRhcmdldCBiZWluZyBtb3JlIGluIHRoZSBtaWRkbGUgb2YgdGhlIHNjcmVlbiwgbmVnYXRpdmUgbnVtYmVycyB3aWxsIHByb2R1Y2Ugc2Nyb2xsaW5nIFwidG9vIGZhclwiXG4gICAqL1xuICBzY3JvbGxPZmZzZXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgYnkgZGVmYXVsdCBmb3IgaW5saW5lIHNjcm9sbCBhbmltYXRpb25zIHRoZSBhZHZhbmNlZCBvZmZzZXQgY2FsY3VsYXRpb24gc2hvdWxkIHRha2UgcGxhY2UgKHRydWUpIG9yXG4gICAqIG5vdCAoZmFsc2UpLiBEZWZhdWx0IGlzIGZhbHNlLlxuICAgKiBUaGUgYWR2YW5jZWQgb2Zmc2V0IGNhbGN1bGF0aW9uIHdpbGwgdHJhdmVyc2UgdGhlIERPTSB0cmVlIHVwd2FyZHMsIHN0YXJ0aW5nIGF0IHRoZSBzY3JvbGxUYXJnZXQsIHVudGlsIGl0IGZpbmRzXG4gICAqIHRoZSBzY3JvbGxpbmdWaWV3IGNvbnRhaW5lciBlbGVtZW50LiBBbG9uZyB0aGUgd2F5IHRoZSBvZmZzZXQgcG9zaXRpb25zIG9mIHRoZSByZWxhdGl2ZSBwb3NpdGlvbmVkXG4gICAqIChwb3NpdGlvbjogcmVsYXRpdmUpIGVsZW1lbnRzIHdpbGwgYmUgdGFrZW4gaW50byBhY2NvdW50IGZvciBjYWxjdWxhdGluZyB0aGUgdGFyZ2V0IGVsZW1lbnRzIHBvc2l0aW9uLlxuICAgKi9cbiAgYWR2YW5jZWRJbmxpbmVPZmZzZXRDYWxjdWxhdGlvbj86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudHMgdGhhdCBhcmUgbGlzdGVuZWQgdG8gb24gdGhlIGJvZHkgdG8gZGVjaWRlIHdoZXRoZXIgYSBzY3JvbGwgYW5pbWF0aW9uIGhhcyBiZWVuIGludGVyZmVyZWQvaW50ZXJydXB0ZWQgYnkgdGhlIHVzZXJcbiAgICovXG4gIGludGVycnVwdEV2ZW50cz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBUaGUga2V5cyB0aGF0IGFyZSBjb25zaWRlcmVkIHRvIGludGVycnVwdCBhIHNjcm9sbCBhbmltYXRpb24gKG1haW5seSB0aGUgYXJyb3cga2V5cykuIEFsbCBvdGhlciBrZXkgcHJlc3NlcyB3aWxsIG5vdCBzdG9wIHRoZVxuICAgKiBzY3JvbGwgYW5pbWF0aW9uLlxuICAgKi9cbiAgaW50ZXJydXB0S2V5cz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGEgc2Nyb2xsIGFuaW1hdGlvbiBzaG91bGQgYmUgaW50ZXJydXB0aWJsZSBieSB1c2VyIGludGVyYWN0aW9uICh0cnVlKSBvciBub3QgKGZhbHNlKS4gSWYgdGhlIHVzZXIgcGVyZm9ybXMgYW5cbiAgICogaW50ZXJydXB0aW5nIGV2ZW50IHdoaWxlIGEgc2Nyb2xsIGFuaW1hdGlvbiB0YWtlcyBwbGFjZSwgdGhlIHNjcm9sbCBhbmltYXRpb24gc3RvcHMuXG4gICAqL1xuICBpbnRlcnJ1cHRpYmxlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgc2Nyb2xsIGFuaW1hdGlvbiBzaG91bGQgdGFrZSBwbGFjZSBpZiB0aGUgdGFyZ2V0IGlzIGFscmVhZHkgaW4gdGhlIHZpZXcgKHRydWUpLiBJZiBzZXQgdG8gZmFsc2UgdGhlIHNjcm9sbFxuICAgKiBhbmltYXRpb24gd2lsbCBub3Qgc3RhcnQsIGluIGNhc2UgdGhlIHRhcmdldCBwaXhlbCBpcyBhbHJlYWR5IGluc2lkZSB0aGUgY3VycmVudCB2aWV3LlxuICAgKi9cbiAgc2Nyb2xsSW5WaWV3PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRWFzaW5nIGxvZ2ljIHRvIGJlIGFwcGxpZWQgd2hlbiBwZXJmb3JtaW5nIHRoZSBzY3JvbGwgYW5pbWF0aW9uXG4gICAqL1xuICBlYXNpbmdMb2dpYz86IEVhc2luZ0xvZ2ljO1xufVxuIl19