{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-page-scroll-core/lib/page-scroll-instance.ts","ng://ngx-page-scroll-core/lib/providers/config.provider.ts","ng://ngx-page-scroll-core/lib/providers/ngx-page-scroll.service.ts","ng://ngx-page-scroll-core/lib/ngx-page-scroll-core.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","PageScrollInstance","pageScrollOptions","startScrollPosition","interruptListenersAttached","timer","scrollViews","isInlineScrolling","document","documentElement","body","parentNode","getScrollingTargetPosition","scrollTargetElement","docEl","windowPageYOffset","defaultView","pageYOffset","undefined","windowPageXOffset","pageXOffset","scrollTop","scrollLeft","clientTop","clientLeft","top","left","box","getBoundingClientRect","Math","round","getInlineScrollingTargetPosition","position","offsetTop","offsetLeft","advancedInlineOffsetCalculation","accumulatedParentsPos","theWindow","ownerDocument","parentFound","parent_1","parentElement","getComputedStyle","getPropertyValue","getScrollPropertyValue","scrollingView","verticalScrolling","getScrollClientPropertyValue","clientHeight","clientWidth","extractScrollTargetPosition","getScrollTargetElement","NaN","getCurrentOffset","scrollOffset","setScrollPosition","_this","reduce","oneAlreadyWorked","startScrollPropertyValue","scrollDistance","abs","isSmallMovement","_minScrollDistance","fireEvent","value","scrollFinishListener","emit","attachInterruptListeners","interruptReporter","detachInterruptListeners","interruptListener","event","report","interruptEvents","forEach","addEventListener","removeEventListener","scrollTarget","targetSelector","match","getElementById","substr","querySelector","NGXPS_CONFIG","InjectionToken","defaultPageScrollConfig","_interval","_logLevel","namespace","duration","interruptKeys","interruptible","scrollInView","easingLogic","b","c","d","PageScrollService","customConfig","runningInstances","onInterrupted","pageScrollInstance","shouldStop","type","config","indexOf","key","some","contains","stopAll","instanceCounter","isDevMode","console","warn","stopInternal","interrupted","index","splice","clearInterval","create","options","start","startScrollPositionFound","scrollRange","scrollPosition","pageScrollOffset","scrollTargetPosition","targetScrollPosition","distanceToScroll","isNaN","log","allReadyAtDestination","executionDuration","speed","tooShortInterval","startTime","Date","getTime","endTime","setInterval","_pageScrollInstance","newScrollPosition","currentTime","stopNow","push","scroll","stoppedSome","stop","Injectable","args","providedIn","Inject","Éµ0$1","NgxPageScrollCoreModule","forRoot","ngModule","providers","provide","useValue","NgModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { EventEmitter } from '@angular/core';\nimport { PageScrollConfig } from './types/page-scroll.config';\nimport { PageScrollTarget } from './types/page-scroll-target';\nimport { PageScrollViews } from './types/page-scroll-view';\nimport { EasingLogic } from './types/easing-logic';\n\n/**\n * An Interface specifying the possible options to be passed into the newInstance() factory method\n */\nexport interface PageScrollOptions extends PageScrollConfig {\n  /**\n   * The document object of the current app\n   */\n  document: Document;\n\n  /**\n   * A specification of the DOM element to scroll to. Either a string referring to an\n   * element using a valid css selector (`#target`, `.class`, `div.class`) or a HTMLElement\n   * that is attached to the document's DOM tree.\n   */\n  scrollTarget: PageScrollTarget;\n\n  /**\n   * Array of HTMLElements or the body object that should be manipulated while performing\n   * the scroll animation.\n   */\n  scrollViews?: PageScrollViews[];\n\n  /**\n   * Maximum speed to be used for the scroll animation. Only taken\n   * into account of no duration is provided\n   */\n  speed?: number;\n\n  /**\n   * A listener to be called whenever the scroll animation stops\n   */\n  scrollFinishListener?: EventEmitter<boolean>;\n\n  namespace?: string;\n  verticalScrolling?: boolean;\n  duration?: number;\n  scrollOffset?: number;\n  advancedInlineOffsetCalculation?: boolean;\n  interruptEvents?: string[];\n  interruptKeys?: string[];\n  interruptible?: boolean;\n  scrollInView?: boolean;\n  easingLogic?: EasingLogic;\n}\n\n/**\n * Represents a scrolling action\n */\nexport class PageScrollInstance {\n\n  public pageScrollOptions: PageScrollOptions;\n\n  private isInlineScrolling: boolean;\n\n  /* The listener that this scroll instance attaches to the body to listen for interrupt events\n  We're keeping a reference to it so we can properly remove it when the animation finishes */\n  private interruptListener: EventListenerOrEventListenerObject;\n\n  /**\n   * These properties will be set/manipulated if the scroll animation starts\n   */\n  /* The initial value of the scrollTop or scrollLeft position when the animation starts */\n  public startScrollPosition = 0;\n  /* The target value of the scrollTop or scrollLeft position for the animation (aka \"the final destination\") */\n  public targetScrollPosition: number;\n  /* Difference between startScrollPosition and targetScrollPosition. Pre-calculated to minimize computations during animation */\n  public distanceToScroll: number;\n  /* The timestamp when the animation starts/got started */\n  public startTime: number;\n  /* The estimate end time of the animation, calculated by startTime + duration */\n  public endTime: number;\n  /* The duration a started animation takes. This may match the _duration or be adjusted due to the _speed option */\n  public executionDuration: number;\n  /* Whether an interrupt listener is attached to the body or not */\n  public interruptListenersAttached = false;\n\n  /* References to the timer instance that is used to perform the scroll animation to be\n   able to clear it on animation end*/\n  public timer: any = null;\n\n  /**\n   * Private constructor, requires the properties assumed to be the bare minimum.\n   * Use the factory methods to create instances:\n   *      {@link PageScrollService#create}\n   */\n  constructor(pageScrollOptions: PageScrollOptions) {\n    if (!pageScrollOptions.scrollViews || pageScrollOptions.scrollViews.length === 0) {\n      pageScrollOptions.scrollViews = [\n        pageScrollOptions.document.documentElement,\n        pageScrollOptions.document.body,\n        pageScrollOptions.document.body.parentNode,\n      ];\n      this.isInlineScrolling = false;\n    } else {\n      this.isInlineScrolling = true;\n    }\n\n    this.pageScrollOptions = pageScrollOptions;\n  }\n\n  private static getScrollingTargetPosition(pageScrollOptions: PageScrollOptions,\n                                            scrollTargetElement: HTMLElement): { top: number, left: number } {\n    const body = pageScrollOptions.document.body;\n    const docEl = pageScrollOptions.document.documentElement;\n\n    const windowPageYOffset: number = pageScrollOptions.document.defaultView &&\n      pageScrollOptions.document.defaultView.pageYOffset || undefined;\n    const windowPageXOffset: number = pageScrollOptions.document.defaultView &&\n      pageScrollOptions.document.defaultView.pageXOffset || undefined;\n\n    const scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;\n    const scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;\n\n    const clientTop = docEl.clientTop || body.clientTop || 0;\n    const clientLeft = docEl.clientLeft || body.clientLeft || 0;\n\n    if (scrollTargetElement === undefined || scrollTargetElement === null) {\n      // No element found, so return the current position to not cause any change in scroll position\n      return {top: scrollTop, left: scrollLeft};\n    }\n    const box = scrollTargetElement.getBoundingClientRect();\n\n    const top = box.top + scrollTop - clientTop;\n    const left = box.left + scrollLeft - clientLeft;\n\n    return {top: Math.round(top), left: Math.round(left)};\n  }\n\n  private static getInlineScrollingTargetPosition(pageScrollOptions: PageScrollOptions,\n                                                  scrollTargetElement: HTMLElement): { top: number, left: number } {\n    const position = {top: scrollTargetElement.offsetTop, left: scrollTargetElement.offsetLeft};\n    if (pageScrollOptions.advancedInlineOffsetCalculation && pageScrollOptions.scrollViews.length === 1) {\n      const accumulatedParentsPos = {top: 0, left: 0};\n      // not named window to make sure we're not getting the global window variable by accident\n      const theWindow = scrollTargetElement.ownerDocument.defaultView;\n      let parentFound = false;\n\n      // Start parent is the immediate parent\n      let parent = scrollTargetElement.parentElement;\n\n      // Iterate upwards all parents\n      while (!parentFound && parent !== undefined && parent !== null) {\n        if (theWindow.getComputedStyle(parent).getPropertyValue('position') === 'relative') {\n          accumulatedParentsPos.top += parent.offsetTop;\n          accumulatedParentsPos.left += parent.offsetLeft;\n        }\n        // Next iteration\n        parent = parent.parentElement;\n        parentFound = parent === pageScrollOptions.scrollViews[0];\n      }\n      if (parentFound) {\n        // Only use the results if we found the parent, otherwise we accumulated too much anyway\n        position.top += accumulatedParentsPos.top;\n        position.left += accumulatedParentsPos.left;\n      } else {\n        /* TODO Uncomment\n        if (PageScrollConfig._logLevel >= 2 || (PageScrollConfig._logLevel >= 1 && isDevMode())) {\n          console.warn('Unable to find nested scrolling targets parent!');\n        }*/\n      }\n    }\n\n    return position;\n  }\n\n  public getScrollPropertyValue(scrollingView: any): number {\n    if (!this.pageScrollOptions.verticalScrolling) {\n      return scrollingView.scrollLeft;\n    }\n\n    return scrollingView.scrollTop;\n  }\n\n  public getScrollClientPropertyValue(scrollingView: any): number {\n    if (!this.pageScrollOptions.verticalScrolling) {\n      return scrollingView.clientWidth;\n    }\n\n    return scrollingView.clientHeight;\n  }\n\n  /**\n   * Extract the exact location of the scrollTarget element.\n   *\n   * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be\n   * a string like \"#heading2\", then this method returns the corresponding DOM element for that id.\n   *\n   */\n  public extractScrollTargetPosition(): { top: number, left: number } {\n    const scrollTargetElement = this.getScrollTargetElement();\n\n    if (scrollTargetElement === null || scrollTargetElement === undefined) {\n      // Scroll target not found\n      return {top: NaN, left: NaN};\n    }\n\n    if (this.isInlineScrolling) {\n      return PageScrollInstance.getInlineScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);\n    }\n\n    return PageScrollInstance.getScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);\n  }\n\n  /**\n   * Get the top offset of the scroll animation.\n   * This automatically takes the offset location of the scrolling container/scrolling view\n   * into account (for nested/inline scrolling).\n   */\n  public getCurrentOffset(): number {\n    return this.pageScrollOptions.scrollOffset;\n  }\n\n  /**\n   * Sets the \"scrollTop\" or \"scrollLeft\" property for all scrollViews to the provided value\n   * @return true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.\n   *          false if it failed for all ScrollViews, meaning that we should stop the animation\n   *          (probably because we're at the end of the scrolling region)\n   */\n  public setScrollPosition(position: number): boolean {\n    // Set the new scrollTop/scrollLeft to all scrollViews elements\n    return this.pageScrollOptions.scrollViews.reduce((oneAlreadyWorked: any, scrollingView: any) => {\n      const startScrollPropertyValue = this.getScrollPropertyValue(scrollingView);\n      if (scrollingView && startScrollPropertyValue !== undefined && startScrollPropertyValue !== null) {\n        const scrollDistance = Math.abs(startScrollPropertyValue - position);\n\n        // The movement we need to perform is less than 2px\n        // This we consider a small movement which some browser may not perform when\n        // changing the scrollTop/scrollLeft property\n        // Thus in this cases we do not stop the scroll animation, although setting the\n        // scrollTop/scrollLeft value \"fails\"\n        const isSmallMovement = scrollDistance < this.pageScrollOptions._minScrollDistance;\n\n        if (!this.pageScrollOptions.verticalScrolling) {\n          scrollingView.scrollLeft = position;\n        } else {\n          scrollingView.scrollTop = position;\n        }\n\n        // Return true if setting the new scrollTop/scrollLeft value worked\n        // We consider that it worked if the new scrollTop/scrollLeft value is closer to the\n        // desired scrollTop/scrollLeft than before (it might not be exactly the value we\n        // set due to dpi or rounding irregularities)\n        if (isSmallMovement || scrollDistance > Math.abs(this.getScrollPropertyValue(scrollingView) - position)) {\n          return true;\n        }\n      }\n\n      return oneAlreadyWorked;\n    }, false);\n  }\n\n  /**\n   * Trigger firing a animation finish event\n   * @param value Whether the animation finished at the target (true) or got interrupted (false)\n   */\n  public fireEvent(value: boolean): void {\n    if (this.pageScrollOptions.scrollFinishListener) {\n      this.pageScrollOptions.scrollFinishListener.emit(value);\n    }\n  }\n\n  /**\n   * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter\n   * will be called if any of the attached events is fired.\n   *\n   * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.\n   */\n  public attachInterruptListeners(interruptReporter: InterruptReporter): void {\n    if (this.interruptListenersAttached) {\n      // Detach possibly existing listeners first\n      this.detachInterruptListeners();\n    }\n    this.interruptListener = (event: Event): void => {\n      interruptReporter.report(event, this);\n    };\n    this.pageScrollOptions.interruptEvents.forEach(\n      (event: string) => this.pageScrollOptions.document.body.addEventListener(event, this.interruptListener)\n    );\n    this.interruptListenersAttached = true;\n  }\n\n  /**\n   * Remove event listeners from the body and stop listening for events that might be treated as \"animation\n   * interrupt\" events.\n   */\n  public detachInterruptListeners(): void {\n    this.pageScrollOptions.interruptEvents.forEach(\n      (event: string) => this.pageScrollOptions.document.body.removeEventListener(event, this.interruptListener)\n    );\n    this.interruptListenersAttached = false;\n  }\n\n  private getScrollTargetElement(): HTMLElement {\n    if (typeof this.pageScrollOptions.scrollTarget === 'string') {\n      const targetSelector = <string>this.pageScrollOptions.scrollTarget;\n      if (targetSelector.match(/^#[^\\s]+$/g) !== null) {\n        // It's an id selector and a valid id, as it does not contain any white space characters\n\n        return this.pageScrollOptions.document.getElementById(targetSelector.substr(1));\n      }\n\n      return <HTMLElement>this.pageScrollOptions.document.querySelector(targetSelector);\n    }\n\n    return <HTMLElement>this.pageScrollOptions.scrollTarget;\n  }\n}\n\n/**\n * An Interface a listener should implement to be notified about possible interrupt events\n * that happened due to user interaction while a scroll animation takes place.\n *\n * The PageScrollService provides an implementation to a PageScrollInstance to be notified\n * about scroll animation interrupts and stop related animations.\n */\nexport interface InterruptReporter {\n  report(event: Event, pageScrollInstance: PageScrollInstance): void;\n}\n","import { InjectionToken } from '@angular/core';\nimport { PageScrollConfig } from '../types/page-scroll.config';\n\nexport const NGXPS_CONFIG = new InjectionToken<PageScrollConfig>('ngxps_config');\n\nexport const defaultPageScrollConfig: PageScrollConfig = {\n  _interval: 10,\n  _minScrollDistance: 2,\n  _logLevel: 1,\n  namespace: 'default',\n  verticalScrolling: true,\n  duration: 1250,\n  scrollOffset: 0,\n  advancedInlineOffsetCalculation: false,\n  interruptEvents: ['mousedown', 'wheel', 'DOMMouseScroll', 'mousewheel', 'keyup', 'touchmove'],\n  interruptKeys: [' ', 'Escape', 'Tab', 'Enter', 'PageUp', 'PageDown', 'Home', 'End', 'ArrowUp', 'ArrowRight', 'ArrowLeft', 'ArrowDown'],\n  interruptible: true,\n  scrollInView: true,\n  easingLogic: (t: number, b: number, c: number, d: number): number => {\n    // Linear easing\n    return c * t / d + b;\n  },\n};\n","import { Inject, Injectable, isDevMode } from '@angular/core';\n\nimport { PageScrollConfig } from '../types/page-scroll.config';\nimport { InterruptReporter, PageScrollInstance, PageScrollOptions } from '../page-scroll-instance';\nimport { defaultPageScrollConfig, NGXPS_CONFIG } from './config.provider';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageScrollService {\n  private static instanceCounter = 0;\n\n  private readonly config: PageScrollConfig;\n\n  private runningInstances: PageScrollInstance[] = [];\n\n  private onInterrupted: InterruptReporter = {\n    report: (event: Event, pageScrollInstance: PageScrollInstance): void => {\n      if (!pageScrollInstance.pageScrollOptions.interruptible) {\n        // Non-interruptible anyway, so do not stop anything\n        return;\n      }\n\n      let shouldStop = true;\n\n      if (event.type === 'keyup') {\n        // Only stop if specific keys have been pressed, for all others don't stop anything\n        if (this.config.interruptKeys.indexOf((<KeyboardEvent>event).key) === -1) {\n          // The pressed key is not in the list of interrupting keys\n          shouldStop = false;\n        }\n      } else if (event.type === 'mousedown') {\n        // For mousedown events we only stop the scroll animation of the mouse has\n        // been clicked inside the scrolling container\n        if (!pageScrollInstance.pageScrollOptions.scrollViews.some(scrollingView => scrollingView.contains(event.target as Node))) {\n          // Mouse clicked an element which is not inside any of the the scrolling containers\n          shouldStop = false;\n        }\n      }\n\n      if (shouldStop) {\n        this.stopAll(pageScrollInstance.pageScrollOptions.namespace);\n      }\n    },\n  };\n\n  private stopInternal(interrupted: boolean, pageScrollInstance: PageScrollInstance): boolean {\n    const index: number = this.runningInstances.indexOf(pageScrollInstance);\n    if (index >= 0) {\n      this.runningInstances.splice(index, 1);\n    }\n\n    if (pageScrollInstance.interruptListenersAttached) {\n      pageScrollInstance.detachInterruptListeners();\n    }\n\n    if (pageScrollInstance.timer) {\n      // Clear/Stop the timer\n      clearInterval(pageScrollInstance.timer);\n      // Clear the reference to this timer\n      pageScrollInstance.timer = undefined;\n      pageScrollInstance.fireEvent(!interrupted);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public create(options: PageScrollOptions): PageScrollInstance {\n    return new PageScrollInstance({...this.config, ...options} as PageScrollOptions);\n  }\n\n  /**\n   * Start a scroll animation. All properties of the animation are stored in the given {@link PageScrollInstance} object.\n   *\n   * This is the core functionality of the whole library.\n   */\n  // tslint:disable-next-line:cyclomatic-complexity\n  public start(pageScrollInstance: PageScrollInstance): void {\n    // Merge the default options in the pageScrollInstance options\n    pageScrollInstance.pageScrollOptions = {...this.config, ...pageScrollInstance.pageScrollOptions} as PageScrollOptions;\n\n    // Stop all possibly running scroll animations in the same namespace\n    this.stopAll(pageScrollInstance.pageScrollOptions.namespace);\n\n    if (pageScrollInstance.pageScrollOptions.scrollViews === null || pageScrollInstance.pageScrollOptions.scrollViews.length === 0) {\n      // No scrollViews specified, thus we can't animate anything\n      if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && isDevMode())) {\n        console.warn('No scrollViews specified, thus ngx-page-scroll does not know which DOM elements to scroll');\n      }\n\n      return;\n    }\n\n    let startScrollPositionFound = false;\n    let scrollRange = pageScrollInstance.getScrollClientPropertyValue(pageScrollInstance.pageScrollOptions.scrollViews[0]);\n    // Reset start scroll position to 0. If any of the scrollViews has a different one, it will be extracted next\n    pageScrollInstance.startScrollPosition = 0;\n\n    // Get the start scroll position from the scrollViews (e.g. if the user already scrolled down the content)\n    pageScrollInstance.pageScrollOptions.scrollViews.forEach(scrollingView => {\n      if (scrollingView === undefined || scrollingView === null) {\n        return;\n      }\n      // Get the scrollTop or scrollLeft value of the first scrollingView that returns a value for its \"scrollTop\"\n      // or \"scrollLeft\" property that is not undefined and unequal to 0\n\n      const scrollPosition = pageScrollInstance.getScrollPropertyValue(scrollingView);\n      if (!startScrollPositionFound && scrollPosition) {\n        // We found a scrollingView that does not have scrollTop or scrollLeft 0\n\n        // Return the scroll position value, as this will be our startScrollPosition\n        pageScrollInstance.startScrollPosition = scrollPosition;\n        startScrollPositionFound = true;\n\n        // Remember te scrollRange of this scrollingView\n        scrollRange = pageScrollInstance.getScrollClientPropertyValue(scrollingView);\n      }\n    });\n\n    const pageScrollOffset = pageScrollInstance.getCurrentOffset();\n\n    // Calculate the target position that the scroll animation should go to\n\n    const scrollTargetPosition = pageScrollInstance.extractScrollTargetPosition();\n    pageScrollInstance.targetScrollPosition = Math.round(\n      (pageScrollInstance.pageScrollOptions.verticalScrolling ? scrollTargetPosition.top : scrollTargetPosition.left) - pageScrollOffset);\n\n    // Calculate the distance we need to go in total\n    pageScrollInstance.distanceToScroll = pageScrollInstance.targetScrollPosition - pageScrollInstance.startScrollPosition;\n\n    if (isNaN(pageScrollInstance.distanceToScroll)) {\n      // We weren't able to find the target position, maybe the element does not exist?\n\n      if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && isDevMode())) {\n        console.log('Scrolling not possible, as we can\\'t find the specified target');\n      }\n      pageScrollInstance.fireEvent(false);\n\n      return;\n    }\n\n    // We're at the final destination already\n    // OR we need to scroll down but are already at the end\n    // OR we need to scroll up but are at the top already\n    const allReadyAtDestination = Math.abs(pageScrollInstance.distanceToScroll) < pageScrollInstance.pageScrollOptions._minScrollDistance;\n\n    // Check how long we need to scroll if a speed option is given\n    // Default executionDuration is the specified duration\n    pageScrollInstance.executionDuration = pageScrollInstance.pageScrollOptions.duration;\n    // Maybe we need to pay attention to the speed option?\n    if ((pageScrollInstance.pageScrollOptions.speed !== undefined && pageScrollInstance.pageScrollOptions.speed !== null) &&\n      (pageScrollInstance.pageScrollOptions.duration === undefined || pageScrollInstance.pageScrollOptions.duration === null)) {\n      // Speed option is set and no duration => calculate duration based on speed and scroll distance\n      pageScrollInstance.executionDuration =\n        Math.abs(pageScrollInstance.distanceToScroll) / pageScrollInstance.pageScrollOptions.speed * 1000;\n    }\n\n    // We should go there directly, as our \"animation\" would have one big step\n    // only anyway and this way we save the interval stuff\n    const tooShortInterval = pageScrollInstance.executionDuration <= pageScrollInstance.pageScrollOptions._interval;\n\n    if (allReadyAtDestination || tooShortInterval) {\n      if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && isDevMode())) {\n        if (allReadyAtDestination) {\n          console.log('Scrolling not possible, as we can\\'t get any closer to the destination');\n        } else {\n          console.log('Scroll duration shorter that interval length, jumping to target');\n        }\n      }\n      pageScrollInstance.setScrollPosition(pageScrollInstance.targetScrollPosition);\n      pageScrollInstance.fireEvent(true);\n\n      return;\n    }\n\n    if (!pageScrollInstance.pageScrollOptions.scrollInView) {\n      const alreadyInView = pageScrollInstance.targetScrollPosition > pageScrollInstance.startScrollPosition &&\n        pageScrollInstance.targetScrollPosition <= pageScrollInstance.startScrollPosition + scrollRange;\n      if (alreadyInView) {\n        if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && isDevMode())) {\n          console.log('Not scrolling, as target already in view');\n        }\n        pageScrollInstance.fireEvent(true);\n\n        return;\n      }\n    }\n\n    // Register the interrupt listeners if we want an interruptible scroll animation\n    if (pageScrollInstance.pageScrollOptions.interruptible) {\n      pageScrollInstance.attachInterruptListeners(this.onInterrupted);\n    }\n\n    // Let's get started, get the start time...\n    pageScrollInstance.startTime = new Date().getTime();\n    // .. and calculate the end time (when we need to finish at last)\n    pageScrollInstance.endTime = pageScrollInstance.startTime + pageScrollInstance.executionDuration;\n\n    pageScrollInstance.timer = setInterval((_pageScrollInstance: PageScrollInstance) => {\n      // Take the current time\n      const currentTime: number = new Date().getTime();\n\n      // Determine the new scroll position\n      let newScrollPosition: number;\n      let stopNow = false;\n      if (_pageScrollInstance.endTime <= currentTime) {\n        // We're over the time already, so go the targetScrollPosition (aka destination)\n        newScrollPosition = _pageScrollInstance.targetScrollPosition;\n        stopNow = true;\n      } else {\n        // Calculate the scroll position based on the current time using the easing function\n        newScrollPosition = Math.round(_pageScrollInstance.pageScrollOptions.easingLogic(\n          currentTime - _pageScrollInstance.startTime,\n          _pageScrollInstance.startScrollPosition,\n          _pageScrollInstance.distanceToScroll,\n          _pageScrollInstance.executionDuration));\n      }\n      if (this.config._logLevel >= 5 && isDevMode()) {\n        console.warn('Scroll Position: ' + newScrollPosition);\n      }\n      // Set the new scrollPosition to all scrollViews elements\n      if (!_pageScrollInstance.setScrollPosition(newScrollPosition)) {\n        // Setting the new scrollTop/scrollLeft value failed for all ScrollViews\n        // early stop the scroll animation to save resources\n        stopNow = true;\n      }\n\n      // At the end do the internal stop maintenance and fire the pageScrollFinish event\n      // (otherwise the event might arrive at \"too early\")\n      if (stopNow) {\n        this.stopInternal(false, _pageScrollInstance);\n      }\n\n    }, this.config._interval, pageScrollInstance);\n\n    // Register the instance as running one\n    this.runningInstances.push(pageScrollInstance);\n  }\n\n  public scroll(options: PageScrollOptions): void {\n    this.start(this.create(options));\n  }\n\n  /**\n   * Stop all running scroll animations. Optionally limit to stop only the ones of specific namespace.\n   */\n  public stopAll(namespace?: string): boolean {\n    if (this.runningInstances.length > 0) {\n      let stoppedSome = false;\n\n      for (let i = 0; i < this.runningInstances.length; ++i) {\n        const pageScrollInstance = this.runningInstances[i];\n        if (!namespace || pageScrollInstance.pageScrollOptions.namespace === namespace) {\n          stoppedSome = true;\n          this.stopInternal(true, pageScrollInstance);\n          // Decrease the counter, as we removed an item from the array we iterate over\n          i--;\n        }\n      }\n\n      return stoppedSome;\n    }\n\n    return false;\n  }\n\n  public stop(pageScrollInstance: PageScrollInstance): boolean {\n    return this.stopInternal(true, pageScrollInstance);\n  }\n\n  constructor(@Inject(NGXPS_CONFIG) customConfig: PageScrollConfig) {\n    this.config = {...defaultPageScrollConfig, ...customConfig};\n\n    if (PageScrollService.instanceCounter > 0 &&\n      (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && isDevMode()))) {\n      console.warn('An instance of PageScrollService already exists, usually ' +\n        'including one provider should be enough, so double check.');\n    }\n    PageScrollService.instanceCounter++;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { PageScrollService } from './providers/ngx-page-scroll.service';\nimport { NGXPS_CONFIG } from './providers/config.provider';\nimport { PageScrollConfig } from './types/page-scroll.config';\n\n@NgModule({\n  providers: [\n    PageScrollService,\n    {provide: NGXPS_CONFIG, useValue: {}},\n  ],\n})\nexport class NgxPageScrollCoreModule {\n  static forRoot(config?: PageScrollConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxPageScrollCoreModule,\n      providers: [PageScrollService, {provide: NGXPS_CONFIG, useValue: config}],\n    };\n  }\n}\n"]}