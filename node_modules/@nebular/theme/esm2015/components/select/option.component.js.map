{"version":3,"file":"option.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/select/option.component.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { convertToBoolProperty } from '../helpers';\nimport { NbFocusableOption } from '../cdk/a11y/focus-key-manager';\nimport { NbSelectComponent } from './select.component';\nimport { NB_SELECT_INJECTION_TOKEN } from './select-injection-tokens';\n\n@Component({\n  selector: 'nb-option',\n  styleUrls: ['./option.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <nb-checkbox *ngIf=\"withCheckbox\"\n                 [checked]=\"selected\"\n                 [disabled]=\"disabled\"\n                 aria-hidden=\"true\">\n    </nb-checkbox>\n    <ng-content></ng-content>\n  `,\n})\nexport class NbOptionComponent<T> implements OnDestroy, NbFocusableOption {\n\n  protected disabledByGroup = false;\n\n  /**\n   * Option value that will be fired on selection.\n   * */\n  @Input() value: T;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || this.disabledByGroup;\n  }\n  set disabled(value: boolean) {\n    this._disabled = convertToBoolProperty(value);\n  }\n  protected _disabled: boolean = false;\n\n  /**\n   * Fires value when option selection change.\n   * */\n  @Output() selectionChange: EventEmitter<NbOptionComponent<T>> = new EventEmitter();\n\n  /**\n   * Fires when option clicked\n   */\n  protected click$: Subject<NbOptionComponent<T>> = new Subject<NbOptionComponent<T>>();\n  get click(): Observable<NbOptionComponent<T>> {\n    return this.click$.asObservable();\n  }\n\n  selected: boolean = false;\n  protected parent: NbSelectComponent<T>;\n  protected alive: boolean = true;\n\n  constructor(@Inject(NB_SELECT_INJECTION_TOKEN) parent,\n              protected elementRef: ElementRef,\n              protected cd: ChangeDetectorRef) {\n    this.parent = parent;\n  }\n\n  ngOnDestroy() {\n    this.alive = false;\n  }\n\n  /**\n   * Determines should we render checkbox.\n   * */\n  get withCheckbox(): boolean {\n    return this.multiple && this.value != null;\n  }\n\n  get content() {\n    return this.elementRef.nativeElement.textContent;\n  }\n\n  get multiple() {\n    return this.parent.multiple;\n  }\n\n  @HostBinding('class.selected')\n  get selectedClass(): boolean {\n    return this.selected;\n  }\n\n  @HostBinding('attr.disabled')\n  get disabledAttribute(): '' | null {\n    return this.disabled ? '' : null;\n  }\n\n  @HostBinding('tabIndex')\n  get tabindex() {\n    return '-1';\n  }\n\n  @HostListener('click', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  @HostListener('keydown.enter', ['$event'])\n  onClick(event) {\n    this.click$.next(this);\n\n    // Prevent scroll on space click, etc.\n    event.preventDefault();\n  }\n\n  select() {\n    this.setSelection(true);\n  }\n\n  deselect() {\n    this.setSelection(false);\n  }\n\n  /**\n   * Sets disabled by group state and marks component for check.\n   */\n  setDisabledByGroupState(disabled: boolean): void {\n    if (this.disabledByGroup !== disabled) {\n      this.disabledByGroup = disabled;\n      this.cd.markForCheck();\n    }\n  }\n\n  protected setSelection(selected: boolean): void {\n    /**\n     * In case of changing options in runtime the reference to the selected option will be kept in select component.\n     * This may lead to exceptions with detecting changes in destroyed component.\n     *\n     * Also Angular can call writeValue on destroyed view (select implements ControlValueAccessor).\n     * angular/angular#27803\n     * */\n    if (this.alive && this.selected !== selected) {\n      this.selected = selected;\n      this.selectionChange.emit(this);\n      this.cd.markForCheck();\n    }\n  }\n\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getLabel(): string {\n    return this.content;\n  }\n}\n"]}