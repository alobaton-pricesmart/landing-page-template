{"version":3,"file":"datepicker.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/datepicker/datepicker.component.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  OnChanges,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Output,\n  Type,\n  AfterViewInit,\n  OnInit,\n  SimpleChanges,\n  Optional,\n} from '@angular/core';\nimport { takeWhile } from 'rxjs/operators';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\n\nimport { NbComponentPortal, NbOverlayRef } from '../cdk/overlay/mapping';\nimport {\n  NbAdjustableConnectedPositionStrategy,\n  NbAdjustment,\n  NbPosition,\n  NbPositionBuilderService,\n} from '../cdk/overlay/overlay-position';\nimport { NbOverlayService, patch } from '../cdk/overlay/overlay-service';\nimport { NbTrigger, NbTriggerStrategy, NbTriggerStrategyBuilderService } from '../cdk/overlay/overlay-trigger';\nimport { NbDatepickerContainerComponent } from './datepicker-container.component';\nimport { NB_DOCUMENT } from '../../theme.options';\nimport { NbCalendarRange, NbCalendarRangeComponent } from '../calendar/calendar-range.component'\nimport { NbCalendarComponent } from '../calendar/calendar.component';\nimport {\n  NbCalendarCell,\n  NbCalendarSize,\n  NbCalendarViewMode,\n} from '../calendar-kit/model';\nimport { NbDateService } from '../calendar-kit/services/date.service';\nimport { NB_DATE_SERVICE_OPTIONS, NbDatepicker, NbPickerValidatorConfig } from './datepicker.directive';\nimport { convertToBoolProperty } from '../helpers';\n\n\n/**\n * The `NbBasePicker` component concentrates overlay manipulation logic.\n * */\nexport abstract class NbBasePicker<D, T, P>\n                extends NbDatepicker<T>\n                implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n  /**\n   * Datepicker date format. Can be used only with date adapters (moment, date-fns) since native date\n   * object doesn't support formatting.\n   * */\n  abstract format: string;\n\n  /**\n   * Defines if we should render previous and next months\n   * in the current month view.\n   * */\n  abstract boundingMonth: boolean;\n\n  /**\n   * Defines starting view for calendar.\n   * */\n  abstract startView: NbCalendarViewMode;\n\n  /**\n   * Minimum available date for selection.\n   * */\n  abstract min: T;\n\n  /**\n   * Maximum available date for selection.\n   * */\n  abstract max: T;\n\n  /**\n   * Predicate that decides which cells will be disabled.\n   * */\n  abstract filter: (T) => boolean;\n\n  /**\n   * Custom day cell component. Have to implement `NbCalendarCell` interface.\n   * */\n  abstract dayCellComponent: Type<NbCalendarCell<D, T>>;\n\n  /**\n   * Custom month cell component. Have to implement `NbCalendarCell` interface.\n   * */\n  abstract monthCellComponent: Type<NbCalendarCell<D, T>>;\n\n  /**\n   * Custom year cell component. Have to implement `NbCalendarCell` interface.\n   * */\n  abstract yearCellComponent: Type<NbCalendarCell<D, T>>;\n\n  /**\n   * Size of the calendar and entire components.\n   * Can be 'medium' which is default or 'large'.\n   * */\n  abstract size: NbCalendarSize = NbCalendarSize.MEDIUM;\n\n  /**\n   * Depending on this date a particular month is selected in the calendar\n   */\n  abstract visibleDate: D;\n\n  /**\n   * Hide picker when a date or a range is selected, `true` by default\n   * @type {boolean}\n   */\n  abstract hideOnSelect: boolean;\n\n  /**\n   * Determines should we show calendars header or not.\n   * @type {boolean}\n   */\n  abstract showHeader: boolean;\n\n  /**\n   * Sets symbol used as a header for week numbers column\n   * */\n  abstract weekNumberSymbol: string;\n\n  /**\n   * Determines should we show week numbers column.\n   * False by default.\n   * */\n  abstract showWeekNumber: boolean;\n\n  /**\n   * Calendar component class that has to be instantiated inside overlay.\n   * */\n  protected abstract pickerClass: Type<P>;\n\n  /**\n   * Overlay reference object.\n   * */\n  protected ref: NbOverlayRef;\n\n  /**\n   * Datepicker container that contains instantiated picker.\n   * */\n  protected container: ComponentRef<NbDatepickerContainerComponent>;\n\n  /**\n   * Positioning strategy used by overlay.\n   * */\n  protected positionStrategy: NbAdjustableConnectedPositionStrategy;\n\n  /**\n   * Trigger strategy used by overlay\n   * */\n  protected triggerStrategy: NbTriggerStrategy;\n\n  /**\n   * HTML input reference to which datepicker connected.\n   * */\n  protected hostRef: ElementRef;\n\n  protected init$: ReplaySubject<void> = new ReplaySubject<void>();\n\n  /**\n   * Stream of picker changes. Required to be the subject because picker hides and shows and picker\n   * change stream becomes recreated.\n   * */\n  protected onChange$: Subject<T> = new Subject();\n\n  /**\n   * Reference to the picker instance itself.\n   * */\n  protected pickerRef: ComponentRef<any>;\n\n  protected alive: boolean = true;\n\n  /**\n   * Queue contains the last value that was applied to the picker when it was hidden.\n   * This value will be passed to the picker as soon as it shown.\n   * */\n  protected queue: T | undefined;\n\n  protected blur$: Subject<void> = new Subject<void>();\n\n  protected constructor(protected overlay: NbOverlayService,\n                        protected positionBuilder: NbPositionBuilderService,\n                        protected triggerStrategyBuilder: NbTriggerStrategyBuilderService,\n                        protected cfr: ComponentFactoryResolver,\n                        protected dateService: NbDateService<D>,\n                        protected dateServiceOptions,\n  ) {\n    super();\n  }\n\n  /**\n   * Returns picker instance.\n   * */\n  get picker(): any {\n    return this.pickerRef && this.pickerRef.instance;\n  }\n\n  /**\n   * Stream of picker value changes.\n   * */\n  get valueChange(): Observable<T> {\n    return this.onChange$.asObservable();\n  }\n\n  get isShown(): boolean {\n    return this.ref && this.ref.hasAttached();\n  }\n\n  get init(): Observable<void> {\n    return this.init$.asObservable();\n  }\n\n  /**\n   * Emits when datepicker looses focus.\n   */\n  get blur(): Observable<void> {\n    return this.blur$.asObservable();\n  }\n\n  protected abstract get pickerValueChange(): Observable<T>;\n\n  ngOnInit() {\n    this.checkFormat();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.format && !changes.format.isFirstChange()) {\n      this.checkFormat();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.init$.next();\n  }\n\n  ngOnDestroy() {\n    this.alive = false;\n    this.hide();\n    this.init$.complete();\n\n    if (this.ref) {\n      this.ref.dispose();\n    }\n\n    if (this.triggerStrategy) {\n      this.triggerStrategy.destroy();\n    }\n  }\n\n  /**\n   * Datepicker knows nothing about host html input element.\n   * So, attach method attaches datepicker to the host input element.\n   * */\n  attach(hostRef: ElementRef) {\n    this.hostRef = hostRef;\n    this.subscribeOnTriggers();\n  }\n\n  getValidatorConfig(): NbPickerValidatorConfig<T> {\n    return { min: this.min, max: this.max, filter: this.filter };\n  }\n\n  show() {\n    if (!this.ref) {\n      this.createOverlay();\n    }\n\n    this.openDatepicker();\n  }\n\n  shouldHide(): boolean {\n    return this.hideOnSelect && !!this.value;\n  }\n\n  hide() {\n    if (this.ref) {\n      this.ref.detach();\n    }\n\n    // save current value if picker was rendered\n    if (this.picker) {\n      this.queue = this.value;\n      this.pickerRef.destroy();\n      this.pickerRef = null;\n      this.container = null;\n    }\n  }\n\n  protected abstract writeQueue();\n\n  protected createOverlay() {\n    this.positionStrategy = this.createPositionStrategy();\n    this.ref = this.overlay.create({\n      positionStrategy: this.positionStrategy,\n      scrollStrategy: this.overlay.scrollStrategies.reposition(),\n    });\n    this.subscribeOnPositionChange();\n  }\n\n  protected openDatepicker() {\n    this.container = this.ref.attach(new NbComponentPortal(NbDatepickerContainerComponent, null, null, this.cfr));\n    this.instantiatePicker();\n    this.subscribeOnValueChange();\n    this.writeQueue();\n    this.patchWithInputs();\n  }\n\n  protected createPositionStrategy(): NbAdjustableConnectedPositionStrategy {\n    return this.positionBuilder\n      .connectedTo(this.hostRef)\n      .position(NbPosition.BOTTOM)\n      .adjustment(NbAdjustment.COUNTERCLOCKWISE);\n  }\n\n  protected subscribeOnPositionChange() {\n    this.positionStrategy.positionChange\n      .pipe(takeWhile(() => this.alive))\n      .subscribe((position: NbPosition) => patch(this.container, { position }));\n  }\n\n  protected createTriggerStrategy(): NbTriggerStrategy {\n    return this.triggerStrategyBuilder\n      .trigger(NbTrigger.FOCUS)\n      .host(this.hostRef.nativeElement)\n      .container(() => this.container)\n      .build();\n  }\n\n  protected subscribeOnTriggers() {\n    this.triggerStrategy = this.createTriggerStrategy();\n    this.triggerStrategy.show$.subscribe(() => this.show());\n    this.triggerStrategy.hide$.subscribe(() => {\n      this.blur$.next();\n      this.hide();\n    });\n  }\n\n  protected instantiatePicker() {\n    this.pickerRef = this.container.instance.attach(new NbComponentPortal(this.pickerClass, null, null, this.cfr));\n  }\n\n  /**\n   * Subscribes on picker value changes and emit data through this.onChange$ subject.\n   * */\n  protected subscribeOnValueChange() {\n    this.pickerValueChange.subscribe(date => {\n      this.onChange$.next(date);\n    });\n  }\n\n  protected patchWithInputs() {\n    this.picker.boundingMonth = this.boundingMonth;\n    this.picker.startView = this.startView;\n    this.picker.min = this.min;\n    this.picker.max = this.max;\n    this.picker.filter = this.filter;\n    this.picker._cellComponent = this.dayCellComponent;\n    this.picker.monthCellComponent = this.monthCellComponent;\n    this.picker._yearCellComponent = this.yearCellComponent;\n    this.picker.size = this.size;\n    this.picker.showHeader = this.showHeader;\n    this.picker.visibleDate = this.visibleDate;\n    this.picker.showWeekNumber = this.showWeekNumber;\n    this.picker.weekNumberSymbol = this.weekNumberSymbol;\n  }\n\n  protected checkFormat() {\n    if (this.dateService.getId() === 'native' && this.format) {\n      throw new Error('Can\\'t format native date. To use custom formatting you have to install @nebular/moment or ' +\n        '@nebular/date-fns package and import NbMomentDateModule or NbDateFnsDateModule accordingly.' +\n        'More information at \"Formatting issue\" ' +\n        'https://akveo.github.io/nebular/docs/components/datepicker/overview#nbdatepickercomponent');\n    }\n\n    const isFormatSet = this.format || (this.dateServiceOptions && this.dateServiceOptions.format);\n    if (this.dateService.getId() === 'date-fns' && !isFormatSet) {\n      throw new Error('format is required when using NbDateFnsDateModule');\n    }\n  }\n}\n\n@Component({\n  template: '',\n})\nexport class NbBasePickerComponent<D, T, P> extends NbBasePicker<D, T, P> {\n\n  /**\n   * Datepicker date format. Can be used only with date adapters (moment, date-fns) since native date\n   * object doesn't support formatting.\n   * */\n  @Input() format: string;\n\n  /**\n   * Defines if we should render previous and next months\n   * in the current month view.\n   * */\n  @Input() boundingMonth: boolean = true;\n\n  /**\n   * Defines starting view for calendar.\n   * */\n  @Input() startView: NbCalendarViewMode = NbCalendarViewMode.DATE;\n\n  /**\n   * Minimum available date for selection.\n   * */\n  @Input() min: T;\n\n  /**\n   * Maximum available date for selection.\n   * */\n  @Input() max: T;\n\n  /**\n   * Predicate that decides which cells will be disabled.\n   * */\n  @Input() filter: (T) => boolean;\n\n  /**\n   * Custom day cell component. Have to implement `NbCalendarCell` interface.\n   * */\n  @Input() dayCellComponent: Type<NbCalendarCell<D, T>>;\n\n  /**\n   * Custom month cell component. Have to implement `NbCalendarCell` interface.\n   * */\n  @Input() monthCellComponent: Type<NbCalendarCell<D, T>>;\n\n  /**\n   * Custom year cell component. Have to implement `NbCalendarCell` interface.\n   * */\n  @Input() yearCellComponent: Type<NbCalendarCell<D, T>>;\n\n  /**\n   * Size of the calendar and entire components.\n   * Can be 'medium' which is default or 'large'.\n   * */\n  @Input() size: NbCalendarSize = NbCalendarSize.MEDIUM;\n\n  /**\n   * Depending on this date a particular month is selected in the calendar\n   */\n  @Input() visibleDate: D;\n\n  /**\n   * Hide picker when a date or a range is selected, `true` by default\n   * @type {boolean}\n   */\n  @Input() hideOnSelect: boolean = true;\n\n  /**\n   * Determines should we show calendars header or not.\n   * @type {boolean}\n   */\n  @Input() showHeader: boolean = true;\n\n  /**\n   * Sets symbol used as a header for week numbers column\n   * */\n  @Input() weekNumberSymbol: string = '#';\n\n  /**\n   * Determines should we show week numbers column.\n   * False by default.\n   * */\n  @Input()\n  get showWeekNumber(): boolean {\n    return this._showWeekNumber;\n  }\n  set showWeekNumber(value: boolean) {\n    this._showWeekNumber = convertToBoolProperty(value);\n  }\n  protected _showWeekNumber: boolean = false;\n\n  constructor(@Inject(NB_DOCUMENT) document,\n              positionBuilder: NbPositionBuilderService,\n              triggerStrategyBuilder: NbTriggerStrategyBuilderService,\n              overlay: NbOverlayService,\n              cfr: ComponentFactoryResolver,\n              dateService: NbDateService<D>,\n              @Optional() @Inject(NB_DATE_SERVICE_OPTIONS) dateServiceOptions,\n  ) {\n    super(overlay, positionBuilder, triggerStrategyBuilder, cfr, dateService, dateServiceOptions);\n  }\n\n  protected pickerClass: Type<P>;\n\n  protected get pickerValueChange(): Observable<T> {\n    return\n  }\n\n  get value(): T | undefined {\n    return undefined;\n  }\n  set value(value: T) {}\n\n  protected writeQueue() {\n  }\n}\n\n/**\n * The DatePicker components itself.\n * Provides a proxy to `NbCalendar` options as well as custom picker options.\n */\n@Component({\n  selector: 'nb-datepicker',\n  template: '',\n})\nexport class NbDatepickerComponent<D> extends NbBasePickerComponent<D, D, NbCalendarComponent<D>> {\n  protected pickerClass: Type<NbCalendarComponent<D>> = NbCalendarComponent;\n\n  /**\n   * Date which will be rendered as selected.\n   * */\n  @Input() set date(date: D) {\n    this.value = date;\n  }\n\n  /**\n   * Emits date when selected.\n   * */\n  @Output() get dateChange(): EventEmitter<D> {\n    return this.valueChange as EventEmitter<D>;\n  }\n\n  get value(): D | undefined {\n    return this.picker ? this.picker.date : undefined;\n  }\n\n  set value(date: D) {\n    if (!this.picker) {\n      this.queue = date;\n      return;\n    }\n\n    if (date) {\n      this.visibleDate = date;\n      this.picker.visibleDate = date;\n      this.picker.date = date;\n    }\n  }\n\n  protected get pickerValueChange(): Observable<D> {\n    return this.picker.dateChange;\n  }\n\n  protected writeQueue() {\n    if (this.queue) {\n      const date = this.queue;\n      this.queue = null;\n      this.value = date;\n    }\n  }\n}\n\n/**\n * The RangeDatePicker components itself.\n * Provides a proxy to `NbCalendarRange` options as well as custom picker options.\n */\n@Component({\n  selector: 'nb-rangepicker',\n  template: '',\n})\nexport class NbRangepickerComponent<D>\n       extends NbBasePickerComponent<D, NbCalendarRange<D>, NbCalendarRangeComponent<D>> {\n  protected pickerClass: Type<NbCalendarRangeComponent<D>> = NbCalendarRangeComponent;\n\n  /**\n   * Range which will be rendered as selected.\n   * */\n  @Input() set range(range: NbCalendarRange<D>) {\n    this.value = range;\n  }\n\n  /**\n   * Emits range when start selected and emits again when end selected.\n   * */\n  @Output() get rangeChange(): EventEmitter<NbCalendarRange<D>> {\n    return this.valueChange as EventEmitter<NbCalendarRange<D>>;\n  }\n\n  get value(): NbCalendarRange<D> | undefined {\n    return this.picker ? this.picker.range : undefined;\n  }\n\n  set value(range: NbCalendarRange<D>) {\n    if (!this.picker) {\n      this.queue = range;\n      return;\n    }\n\n    if (range) {\n      const visibleDate = range && range.start;\n      this.visibleDate = visibleDate;\n      this.picker.visibleDate = visibleDate;\n      this.picker.range = range;\n    }\n  }\n\n  protected get pickerValueChange(): Observable<NbCalendarRange<D>> {\n    return this.picker.rangeChange;\n  }\n\n  shouldHide(): boolean {\n    return super.shouldHide() && !!(this.value && this.value.start && this.value.end);\n  }\n\n  protected writeQueue() {\n    if (this.queue) {\n      const range = this.queue;\n      this.queue = null;\n      this.value = range;\n    }\n  }\n}\n"]}