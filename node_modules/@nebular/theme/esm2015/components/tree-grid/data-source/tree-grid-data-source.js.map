{"version":3,"file":"tree-grid-data-source.js","sourceRoot":"","sources":["../../../../../../../.ng_build/theme/components/tree-grid/data-source/tree-grid-data-source.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { NbCollectionViewer } from '../../cdk/collections/collection-viewer';\nimport { NbDataSource } from '../../cdk/table/data-source';\nimport { NbSortable, NbSortRequest } from '../tree-grid-sort.component';\nimport { NbTreeGridDataService } from './tree-grid-data.service';\nimport { NbTreeGridFilterService } from './tree-grid-filter.service';\nimport { NbTreeGridSortService } from './tree-grid-sort.service';\nimport { NbGetters, NB_DEFAULT_ROW_LEVEL, NbTreeGridPresentationNode } from './tree-grid.model';\nimport { NbToggleOptions, NbTreeGridService } from './tree-grid.service';\n\nexport interface NbFilterable {\n  filter(filterRequest: string);\n}\n\nexport class NbTreeGridDataSource<T> extends NbDataSource<NbTreeGridPresentationNode<T>>\n                                     implements NbSortable, NbFilterable {\n  /** Stream that emits when a new data array is set on the data source. */\n  private data: BehaviorSubject<NbTreeGridPresentationNode<T>[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly renderData = new BehaviorSubject<NbTreeGridPresentationNode<T>[]>([]);\n\n  private readonly filterRequest = new BehaviorSubject<string>('');\n\n  private readonly sortRequest = new BehaviorSubject<NbSortRequest>(null);\n\n  constructor(private sortService: NbTreeGridSortService<T>,\n              private filterService: NbTreeGridFilterService<T>,\n              private treeGridService: NbTreeGridService<T>,\n              private treeGridDataService: NbTreeGridDataService<T>) {\n    super();\n  }\n\n  setData<N>(data: N[], customGetters?: NbGetters<N, T>) {\n    let presentationData: NbTreeGridPresentationNode<T>[] = [];\n    if (data) {\n      presentationData = this.treeGridDataService.toPresentationNodes(data, customGetters);\n    }\n\n    this.data = new BehaviorSubject(presentationData);\n    this.updateChangeSubscription();\n  }\n\n  connect(\n    collectionViewer: NbCollectionViewer,\n  ): Observable<NbTreeGridPresentationNode<T>[] | ReadonlyArray<NbTreeGridPresentationNode<T>>> {\n    return this.renderData;\n  }\n\n  disconnect(collectionViewer: NbCollectionViewer) {\n  }\n\n  expand(row: T) {\n    this.treeGridService.expand(this.data.value, row);\n    this.data.next(this.data.value);\n  }\n\n  collapse(row: T) {\n    this.treeGridService.collapse(this.data.value, row);\n    this.data.next(this.data.value);\n  }\n\n  toggle(row: T, options?: NbToggleOptions) {\n    this.treeGridService.toggle(this.data.value, row, options);\n    this.data.next(this.data.value);\n  }\n\n  toggleByIndex(dataIndex: number, options?: NbToggleOptions) {\n    const node: NbTreeGridPresentationNode<T> = this.renderData.value && this.renderData.value[dataIndex];\n    if (node) {\n      this.toggle(node.data, options);\n    }\n  }\n\n  getLevel(rowIndex: number): number {\n    const row = this.renderData.value[rowIndex];\n    return row ? row.level : NB_DEFAULT_ROW_LEVEL;\n  }\n\n  sort(sortRequest: NbSortRequest) {\n    this.sortRequest.next(sortRequest);\n  }\n\n  filter(searchQuery: string) {\n    this.filterRequest.next(searchQuery);\n  }\n\n  protected updateChangeSubscription() {\n    const dataStream = this.data;\n\n    const filteredData = combineLatest(dataStream, this.filterRequest)\n      .pipe(\n        map(([data]) => this.treeGridDataService.copy(data)),\n        map(data => this.filterData(data)),\n      );\n\n    const sortedData = combineLatest(filteredData, this.sortRequest)\n      .pipe(\n        map(([data]) => this.sortData(data)),\n      );\n\n    sortedData\n      .pipe(\n        map((data: NbTreeGridPresentationNode<T>[]) => this.treeGridDataService.flattenExpanded(data)),\n      )\n      .subscribe((data: NbTreeGridPresentationNode<T>[]) => this.renderData.next(data));\n  }\n\n  private filterData(data: NbTreeGridPresentationNode<T>[]): NbTreeGridPresentationNode<T>[] {\n    return this.filterService.filter(this.filterRequest.value, data);\n  }\n\n  private sortData(data: NbTreeGridPresentationNode<T>[]): NbTreeGridPresentationNode<T>[] {\n    return this.sortService.sort(this.sortRequest.value, data);\n  }\n}\n\n@Injectable()\nexport class NbTreeGridDataSourceBuilder<T> {\n  constructor(private filterService: NbTreeGridFilterService<T>,\n              private sortService: NbTreeGridSortService<T>,\n              private treeGridService: NbTreeGridService<T>,\n              private treeGridDataService: NbTreeGridDataService<T>) {\n  }\n\n  create<N>(data: N[], customGetters?: NbGetters<N, T>): NbTreeGridDataSource<T> {\n    const dataSource = new NbTreeGridDataSource<T>(\n      this.sortService,\n      this.filterService,\n      this.treeGridService,\n      this.treeGridDataService,\n    );\n\n    dataSource.setData(data, customGetters);\n    return dataSource;\n  }\n}\n"]}