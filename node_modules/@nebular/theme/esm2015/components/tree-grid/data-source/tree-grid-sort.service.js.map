{"version":3,"file":"tree-grid-sort.service.js","sourceRoot":"","sources":["../../../../../../../.ng_build/theme/components/tree-grid/data-source/tree-grid-sort.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAGH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAiB,MAAM,6BAA6B,CAAC;AAG7E;;;GAGG;AAEH,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;IAEhC,IAAI,CAAC,OAAsB,EAAE,IAAqC;QAChE,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACvE,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACvB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;aACnD;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAES,UAAU,CAClB,OAAsB,EACtB,EAAiC,EACjC,EAAiC;QAEjC,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;QAC3B,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC;QAC9B,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvB,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEvB,IAAI,GAAG,GAAG,CAAC,CAAC;QAEZ,IAAI,CAAC,GAAG,CAAC,EAAE;YACT,GAAG,GAAG,CAAC,CAAA;SACR;QACD,IAAI,CAAC,GAAG,CAAC,EAAE;YACT,GAAG,GAAG,CAAC,CAAC,CAAA;SACT;QAED,OAAO,GAAG,KAAK,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IAC5D,CAAC;CACF,CAAA;AArCY,qBAAqB;IADjC,UAAU,EAAE;GACA,qBAAqB,CAqCjC;SArCY,qBAAqB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n\nimport { Injectable } from '@angular/core';\nimport { NbSortDirection, NbSortRequest } from '../tree-grid-sort.component';\nimport { NbTreeGridPresentationNode } from './tree-grid.model';\n\n/**\n * Service used to sort tree grid data. Uses Array.prototype.sort method.\n * If you need custom sorting, you can extend this service and override comparator or whole sort method.\n */\n@Injectable()\nexport class NbTreeGridSortService<T> {\n\n  sort(request: NbSortRequest, data: NbTreeGridPresentationNode<T>[]): NbTreeGridPresentationNode<T>[] {\n    if (!request) {\n      return data;\n    }\n\n    const sorted = data.sort((na, nb) => this.comparator(request, na, nb));\n    for (const node of data) {\n      if (node.children) {\n        node.children = this.sort(request, node.children);\n      }\n    }\n    return sorted;\n  }\n\n  protected comparator(\n    request: NbSortRequest,\n    na: NbTreeGridPresentationNode<T>,\n    nb: NbTreeGridPresentationNode<T>,\n  ): number {\n    const key = request.column;\n    const dir = request.direction;\n    const a = na.data[key];\n    const b = nb.data[key];\n\n    let res = 0;\n\n    if (a > b) {\n      res = 1\n    }\n    if (a < b) {\n      res = -1\n    }\n\n    return dir === NbSortDirection.ASCENDING ? res : res * -1;\n  }\n}\n"]}