{"version":3,"file":"tree-grid.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tree-grid/tree-grid.component.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  HostBinding,\n  Inject,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport { fromEvent, merge } from 'rxjs';\nimport { debounceTime, takeWhile } from 'rxjs/operators';\n\nimport { NB_DOCUMENT, NB_WINDOW } from '../../theme.options';\nimport { NbPlatform } from '../cdk/platform/platform-service';\nimport { NbDirectionality } from '../cdk/bidi/bidi-service';\nimport { NB_TABLE_TEMPLATE, NbTable } from '../cdk/table/table.module';\nimport { NbTreeGridDataSource, NbTreeGridDataSourceBuilder } from './data-source/tree-grid-data-source';\nimport { NB_DEFAULT_ROW_LEVEL, NbTreeGridPresentationNode } from './data-source/tree-grid.model';\nimport { NbToggleOptions } from './data-source/tree-grid.service';\nimport { NB_TREE_GRID } from './tree-grid-injection-tokens';\nimport { NbTreeGridRowComponent } from './tree-grid-row.component';\nimport { NbTreeGridCellDirective } from './tree-grid-cell.component';\nimport { convertToBoolProperty } from '../helpers';\nimport { NbTreeGridColumnDefDirective } from './tree-grid-column-def.directive';\nimport {\n  NbTreeGridFooterRowDefDirective,\n  NbTreeGridHeaderRowDefDirective,\n  NbTreeGridRowDefDirective,\n} from './tree-grid-def.component';\nimport { NbColumnsService } from './tree-grid-columns.service';\n\n/**\n * Tree grid component that can be used to display nested rows of data.\n * Supports filtering and sorting.\n * @stacked-example(Showcase, tree-grid/tree-grid-showcase.component)\n *\n * ### Installation\n *\n * Import `NbTreeGridModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbTreeGridModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n *\n * ### Usage\n *\n * As the most basic usage you need to define [nbTreeGridRowDef](docs/components/treegrid/api#nbtreegridrowdefdirective)\n * where you should pass columns to display in rows and\n * [nbTreeGridColumnDef](docs/components/treegrid/api#nbtreegridcolumndefdirective) - component containing cell\n * definitions for each column passed to row definition.\n * @stacked-example(Basic, tree-grid/tree-grid-basic.component)\n *\n * `NbTreeGridComponent`'s source input and `NbTreeGridDataSourceBuilder.create` expecting data to be an array of\n * objects with `data`, `children` and `expanded` properties. If your data doesn't match this interface, you can pass\n * getter functions for each property as arguments to `NbTreeGridDataSourceBuilder.create` method.\n * @stacked-example(Custom node structure, tree-grid/tree-grid-custom-node-structure.component)\n *\n * To use sorting you can add `nbSort` directive to table and subscribe to `sort` method. When user click on header,\n * sort event will be emitted. Event object contain clicked column name and desired sort direction.\n * @stacked-example(Sortable, tree-grid/tree-grid-sortable.component)\n *\n * You can use `Data Source Builder` to create `NbTreeGridDataSource` which would have toggle, sort and\n * filter methods. Then you can call this methods to change sort or toggle rows programmatically. Also `nbSort` and\n * `nbFilterInput` directives both support `NbTreeGridDataSource`, so you can pass it directly as an input and\n * directives will trigger sort, toggle themselves.\n * @stacked-example(Data Source Builder, tree-grid/tree-grid-showcase.component)\n *\n * You can create responsive grid by setting `hideOn` and `showOn` inputs of\n * [nbTreeGridColumnDef](docs/components/tree-grid/api#nbtreegridcolumndefdirective) directive.\n * When viewport reaches specified width grid hides or shows columns.\n * @stacked-example(Responsive columns, tree-grid/tree-grid-responsive.component)\n *\n * To customize sort or row toggle icons you can use `nbSortHeaderIcon` and `nbTreeGridRowToggle` directives\n * respectively. `nbSortHeaderIcon` is a structural directive and it's implicit context set to current direction.\n * Also context has three properties: `isAscending`, `isDescending` and `isNone`.\n * @stacked-example(Custom icons, tree-grid/tree-grid-custom-icons.component)\n *\n * By default, row to toggle happens when user clicks anywhere in the row. Also double click expands row deeply.\n * To disable this you can set `[clickToToggle]=\"false\"` input of `nbTreeGridRow`.\n * @stacked-example(Disable click toggle, tree-grid/tree-grid-disable-click-toggle.component)\n *\n * @styles\n *\n * tree-grid-cell-border-width:\n * tree-grid-cell-border-style:\n * tree-grid-cell-border-color:\n * tree-grid-row-min-height:\n * tree-grid-cell-padding:\n * tree-grid-header-background-color:\n * tree-grid-header-text-color:\n * tree-grid-header-text-font-family:\n * tree-grid-header-text-font-size:\n * tree-grid-header-text-font-weight:\n * tree-grid-header-text-line-height:\n * tree-grid-footer-background-color:\n * tree-grid-footer-text-color:\n * tree-grid-footer-text-font-family:\n * tree-grid-footer-text-font-size:\n * tree-grid-footer-text-font-weight:\n * tree-grid-footer-text-line-height:\n * tree-grid-row-background-color:\n * tree-grid-row-even-background-color:\n * tree-grid-row-hover-background-color:\n * tree-grid-row-text-color:\n * tree-grid-row-text-font-family:\n * tree-grid-row-text-font-size:\n * tree-grid-row-text-font-weight:\n * tree-grid-row-text-line-height:\n * tree-grid-sort-header-button-background-color:\n * tree-grid-sort-header-button-border:\n * tree-grid-sort-header-button-padding:\n */\n@Component({\n  selector: 'table[nbTreeGrid]',\n  template: NB_TABLE_TEMPLATE,\n  styleUrls: ['./tree-grid.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: NB_TREE_GRID, useExisting: NbTreeGridComponent },\n    NbColumnsService,\n  ],\n})\nexport class NbTreeGridComponent<T> extends NbTable<NbTreeGridPresentationNode<T>>\n                                    implements AfterViewInit, OnDestroy {\n\n  constructor(private dataSourceBuilder: NbTreeGridDataSourceBuilder<T>,\n              differs: IterableDiffers,\n              changeDetectorRef: ChangeDetectorRef,\n              elementRef: ElementRef,\n              @Attribute('role') role: string,\n              dir: NbDirectionality,\n              @Inject(NB_DOCUMENT) document: any,\n              platform: NbPlatform | undefined,\n              @Inject(NB_WINDOW) private window,\n  ) {\n    super(differs, changeDetectorRef, elementRef, role, dir, document, platform);\n    this.platform = platform;\n  }\n\n  private alive: boolean = true;\n  private _source: NbTreeGridDataSource<T>;\n  private platform: NbPlatform;\n\n  /**\n   * The table's data\n   * @param data\n   * @type {<T>[] | NbTreeGridDataSource}\n   */\n  @Input('nbTreeGrid') set source(data: T[] | NbTreeGridDataSource<T>) {\n    if (!data) {\n      return;\n    }\n\n    if (data instanceof NbTreeGridDataSource) {\n      this._source = data;\n    } else {\n      this._source = this.dataSourceBuilder.create(data);\n    }\n    this.dataSource = this._source;\n  }\n\n  @Input() levelPadding: string = '';\n\n  /**\n   * Make all columns equal width. False by default.\n   */\n  @Input()\n  set equalColumnsWidth(value: boolean) {\n    this.equalColumnsWidthValue = convertToBoolProperty(value);\n  }\n  get equalColumnsWidth(): boolean {\n    return this.equalColumnsWidthValue;\n  }\n  private equalColumnsWidthValue: boolean = false;\n\n  @ContentChildren(NbTreeGridRowComponent) private rows: QueryList<NbTreeGridRowComponent>;\n\n  @HostBinding('class.nb-tree-grid') readonly treeClass = true;\n\n  ngAfterViewInit() {\n    this.checkDefsCount();\n    const rowsChange$ = merge(\n      this._contentRowDefs.changes,\n      this._contentHeaderRowDefs.changes,\n      this._contentFooterRowDefs.changes,\n    );\n    rowsChange$.pipe(takeWhile(() => this.alive))\n      .subscribe(() => this.checkDefsCount());\n\n    if (this.platform.isBrowser) {\n      this.updateVisibleColumns();\n\n      const windowResize$ = fromEvent(this.window, 'resize').pipe(debounceTime(50));\n      merge(rowsChange$, this._contentColumnDefs.changes, windowResize$)\n        .pipe(takeWhile(() => this.alive))\n        .subscribe(() => this.updateVisibleColumns());\n    }\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.alive = false;\n  }\n\n  toggleRow(row: NbTreeGridRowComponent, options?: NbToggleOptions): void {\n    this._source.toggleByIndex(this.getDataIndex(row), options);\n  }\n\n  toggleCellRow(cell: NbTreeGridCellDirective): void {\n    this.toggleRow(this.findCellRow(cell));\n  }\n\n  getColumnWidth(): string {\n    if (this.equalColumnsWidth) {\n      return `${100 / this.getColumnsCount()}%`;\n    }\n    return '';\n  }\n\n  getCellLevel(cell: NbTreeGridCellDirective, columnName: string): number {\n    const isFirstColumn = this.isFirstColumn(columnName);\n    const row = isFirstColumn && this.findCellRow(cell);\n    const level = row && this.getRowLevel(row);\n    if (level || level === 0) {\n      return level;\n    }\n    return NB_DEFAULT_ROW_LEVEL;\n  }\n\n  private getDataIndex(row: NbTreeGridRowComponent): number {\n    const rowEl = row.elementRef.nativeElement;\n    const parent = rowEl.parentElement;\n    if (parent) {\n      return Array.from(parent.children)\n        .filter((child: Element) => child.hasAttribute('nbtreegridrow'))\n        .indexOf(rowEl);\n    }\n\n    return -1;\n  }\n\n  private getRowLevel(row: NbTreeGridRowComponent): number {\n    return this._source.getLevel(this.getDataIndex(row));\n  }\n\n  private getColumns(): string[] {\n    const { columns } = this._contentHeaderRowDefs.length\n      ? this._contentHeaderRowDefs.first\n      : this._contentRowDefs.first;\n\n    return Array.from(columns || []);\n  }\n\n  private getColumnsCount(): number {\n    return this.getColumns().length;\n  }\n\n  private isFirstColumn(columnName: string): boolean {\n    return this.getColumns()[0] === columnName;\n  }\n\n  private findCellRow(cell: NbTreeGridCellDirective): NbTreeGridRowComponent | undefined {\n    const cellRowElement = cell.elementRef.nativeElement.parentElement;\n\n    return this.rows.toArray()\n      .find((row: NbTreeGridRowComponent) => {\n        return row.elementRef.nativeElement === cellRowElement;\n      });\n  }\n\n  private checkDefsCount(): void {\n    if (this._contentRowDefs.length > 1) {\n      throw new Error(`Found multiple row definitions`);\n    }\n    if (this._contentHeaderRowDefs.length > 1) {\n      throw new Error(`Found multiple header row definitions`);\n    }\n    if (this._contentFooterRowDefs.length > 1) {\n      throw new Error(`Found multiple footer row definitions`);\n    }\n  }\n\n  private updateVisibleColumns(): void {\n    const width = this.window.innerWidth;\n    const columnDefs = (this._contentColumnDefs as QueryList<NbTreeGridColumnDefDirective>);\n\n    const columnsToHide: string[] = columnDefs\n      .filter((col: NbTreeGridColumnDefDirective) => col.shouldHide(width))\n      .map(col => col.name);\n\n    const columnsToShow: string[] = columnDefs\n      .filter((col: NbTreeGridColumnDefDirective) => col.shouldShow(width))\n      .map(col => col.name);\n\n    if (!columnsToHide.length && !columnsToShow.length) {\n      return;\n    }\n\n    const rowDefs = [\n      this._contentHeaderRowDefs.first as NbTreeGridHeaderRowDefDirective,\n      this._contentRowDefs.first as NbTreeGridRowDefDirective<any>,\n      this._contentFooterRowDefs.first as NbTreeGridFooterRowDefDirective,\n    ].filter(d => !!d);\n\n    for (const rowDef of rowDefs) {\n      for (const column of columnsToHide) {\n        rowDef.hideColumn(column);\n      }\n\n      for (const column of columnsToShow) {\n        rowDef.showColumn(column);\n      }\n    }\n  }\n}\n"]}