{"version":3,"file":"tooltip.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tooltip/tooltip.component.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;;;;AAEH,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAC9D,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAC;AAIjF,OAAO,EAAE,UAAU,EAAE,MAAM,iCAAiC,CAAC;AAI7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AAwBH,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAlE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA0CG;IACH;QA4BE;;aAEK;QAEL,aAAQ,GAAe,UAAU,CAAC,GAAG,CAAC;QAatC,YAAO,GAAiE,EAAE,CAAC;IAe7E,CAAC;IAzBC,IAAI,OAAO;QACT,OAAO,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;IAChD,CAAC;IAGD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC;IACd,CAAC;IAKD,IAAI,WAAW;QACb,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACvB,OAAO,UAAU,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;SACxC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;OAGG;IACH,aAAa,KAAI,CAAC;CACnB,CAAA;AAlCC;IADC,KAAK,EAAE;;mDACQ;AAMhB;IADC,KAAK,EAAE;;oDAC8B;AAGtC;IADC,WAAW,CAAC,OAAO,CAAC;;;iDAGpB;AAGD;IADC,WAAW,CAAC,cAAc,CAAC;;;8CAG3B;AAGD;IADC,KAAK,EAAE;;mDACmE;AAtBhE,kBAAkB;IAvB9B,SAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QAEtB,QAAQ,EAAE;;;;;;GAMT;QACD,UAAU,EAAE;YACV,OAAO,CAAC,aAAa,EAAE;gBACrB,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;gBAClC,UAAU,CAAC,WAAW,EAAE;oBACtB,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;oBACrB,OAAO,CAAC,GAAG,CAAC;iBACb,CAAC;gBACF,UAAU,CAAC,WAAW,EAAE;oBACtB,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;iBACpC,CAAC;aACH,CAAC;SACH;;KACF,CAAC;GACW,kBAAkB,CAqC9B;SArCY,kBAAkB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Component, HostBinding, Input } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\nimport { NbComponentStatus } from '../component-status';\nimport { NbRenderableContainer } from '../cdk/overlay/overlay-container';\nimport { NbPosition } from '../cdk/overlay/overlay-position';\nimport { NbIconConfig } from '../icon/icon.component';\n\n\n/**\n * Tooltip container.\n * Renders provided tooltip inside.\n *\n * @styles\n *\n * tooltip-background-color:\n * tooltip-border-color:\n * tooltip-border-style:\n * tooltip-border-width:\n * tooltip-border-radius:\n * tooltip-padding:\n * tooltip-text-color:\n * tooltip-text-font-family:\n * tooltip-text-font-size:\n * tooltip-text-font-weight:\n * tooltip-text-line-height:\n * tooltip-icon-height:\n * tooltip-icon-width:\n * tooltip-max-width:\n * tooltip-basic-background-color:\n * tooltip-basic-border-color:\n * tooltip-basic-text-color:\n * tooltip-primary-background-color:\n * tooltip-primary-border-color:\n * tooltip-primary-text-color:\n * tooltip-info-background-color:\n * tooltip-info-border-color:\n * tooltip-info-text-color:\n * tooltip-success-background-color:\n * tooltip-success-border-color:\n * tooltip-success-text-color:\n * tooltip-warning-background-color:\n * tooltip-warning-border-color:\n * tooltip-warning-text-color:\n * tooltip-danger-background-color:\n * tooltip-danger-border-color:\n * tooltip-danger-text-color:\n * tooltip-control-background-color:\n * tooltip-control-border-color:\n * tooltip-control-text-color:\n * tooltip-shadow:\n */\n@Component({\n  selector: 'nb-tooltip',\n  styleUrls: ['./tooltip.component.css'],\n  template: `\n    <span class=\"arrow\"></span>\n    <div class=\"content\">\n      <nb-icon *ngIf=\"context?.icon\" [config]=\"context.icon\"></nb-icon>\n      <span *ngIf=\"content\">{{ content }}</span>\n    </div>\n  `,\n  animations: [\n    trigger('showTooltip', [\n      state('in', style({ opacity: 1 })),\n      transition('void => *', [\n        style({ opacity: 0 }),\n        animate(100),\n      ]),\n      transition('* => void', [\n        animate(100, style({ opacity: 0 })),\n      ]),\n    ]),\n  ],\n})\nexport class NbTooltipComponent implements NbRenderableContainer {\n\n  @Input()\n  content: string;\n\n  /**\n   * Popover position relatively host element.\n   * */\n  @Input()\n  position: NbPosition = NbPosition.TOP;\n\n  @HostBinding('class')\n  get binding() {\n    return `${this.position} ${this.statusClass}`;\n  }\n\n  @HostBinding('@showTooltip')\n  get show() {\n    return true;\n  }\n\n  @Input()\n  context: { icon?: string | NbIconConfig, status?: NbComponentStatus } = {};\n\n  get statusClass() {\n    if (this.context.status) {\n      return `status-${this.context.status}`;\n    }\n\n    return '';\n  }\n\n  /**\n   * The method is empty since we don't need to do anything additionally\n   * render is handled by change detection\n   */\n  renderContent() {}\n}\n"]}