{"version":3,"file":"option-group.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/select/option-group.component.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;;;;AAEH,OAAO,EAEL,uBAAuB,EACvB,SAAS,EACT,eAAe,EACf,WAAW,EACX,KAAK,EAEL,SAAS,GACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAE,qBAAqB,EAAE,MAAM,YAAY,CAAC;AACnD,OAAO,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AAWvD;IATA;QAWY,UAAK,GAAG,IAAI,CAAC;QAeb,cAAS,GAAY,KAAK,CAAC;IAsCvC,CAAC;IAhDC,sBAAI,4CAAQ;aAAZ;YACE,OAAO,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;aACD,UAAa,KAAc;YACzB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;YAE9C,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,IAAI,CAAC,0BAA0B,EAAE,CAAC;aACnC;QACH,CAAC;;;OAPA;IAWD,sBAAI,qDAAiB;aAArB;YACE,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QACnC,CAAC;;;OAAA;IAID,mDAAkB,GAAlB;QAAA,iBAQC;QAPC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACvB,IAAI,CAAC,+BAA+B,EAAE,CAAC;SACxC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO;aACjB,IAAI,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,KAAK,EAAV,CAAU,CAAC,CAAC;aACjC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,+BAA+B,EAAE,EAAtC,CAAsC,CAAC,CAAC;IAC7D,CAAC;IAED,4CAAW,GAAX;QACE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;OAEG;IACO,2DAA0B,GAApC;QAAA,iBAEC;QADC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,MAA8B,IAAK,OAAA,MAAM,CAAC,uBAAuB,CAAC,KAAI,CAAC,QAAQ,CAAC,EAA7C,CAA6C,CAAC,CAAC;IAC1G,CAAC;IAED;;;;OAIG;IACO,gEAA+B,GAAzC;QAAA,iBAEC;QADC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,0BAA0B,EAAE,EAAjC,CAAiC,CAAC,CAAC;IAClE,CAAC;IAlDQ;QAAR,KAAK,EAAE;;yDAAe;IAGvB;QADC,KAAK,EAAE;;;0DAGP;IAWD;QADC,WAAW,CAAC,eAAe,CAAC;;;mEAG5B;IAE0D;QAA1D,eAAe,CAAC,iBAAiB,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;kCAAU,SAAS;2DAAyB;IAxB3F,sBAAsB;QATlC,SAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;YAE3B,eAAe,EAAE,uBAAuB,CAAC,MAAM;YAC/C,QAAQ,EAAE,mIAGT;;SACF,CAAC;OACW,sBAAsB,CAuDlC;IAAD,6BAAC;CAAA,AAvDD,IAuDC;SAvDY,sBAAsB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  HostBinding,\n  Input,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport { takeWhile } from 'rxjs/operators';\n\nimport { convertToBoolProperty } from '../helpers';\nimport { NbOptionComponent } from './option.component';\n\n@Component({\n  selector: 'nb-option-group',\n  styleUrls: ['./option-group.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <span class=\"option-group-title\">{{ title }}</span>\n    <ng-content select=\"nb-option, ng-container\"></ng-content>\n  `,\n})\nexport class NbOptionGroupComponent implements AfterContentInit, OnDestroy {\n\n  protected alive = true;\n\n  @Input() title: string;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = convertToBoolProperty(value);\n\n    if (this.options) {\n      this.updateOptionsDisabledState();\n    }\n  }\n  protected _disabled: boolean = false;\n\n  @HostBinding('attr.disabled')\n  get disabledAttribute(): '' | null {\n    return this.disabled ? '' : null;\n  }\n\n  @ContentChildren(NbOptionComponent, { descendants: true }) options: QueryList<NbOptionComponent<any>>;\n\n  ngAfterContentInit() {\n    if (this.options.length) {\n      this.asyncUpdateOptionsDisabledState();\n    }\n\n    this.options.changes\n      .pipe(takeWhile(() => this.alive))\n      .subscribe(() => this.asyncUpdateOptionsDisabledState());\n  }\n\n  ngOnDestroy() {\n    this.alive = false;\n  }\n\n  /**\n   * Sets disabled state for each option to current group disabled state.\n   */\n  protected updateOptionsDisabledState(): void {\n    this.options.forEach((option: NbOptionComponent<any>) => option.setDisabledByGroupState(this.disabled));\n  }\n\n  /**\n   * Updates options disabled state after promise resolution.\n   * This way change detection will be triggered after options state updated.\n   * Use this method when updating options during change detection run (e.g. QueryList.changes, lifecycle hooks).\n   */\n  protected asyncUpdateOptionsDisabledState(): void {\n    Promise.resolve().then(() => this.updateOptionsDisabledState());\n  }\n}\n\n\n"]}