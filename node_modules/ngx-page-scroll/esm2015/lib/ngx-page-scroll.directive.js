/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable:no-host-metadata-property directive-selector */
import { Directive, EventEmitter, Inject, Input, Optional, Output } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, Router } from '@angular/router';
import { DOCUMENT } from '@angular/common';
import { PageScrollService } from 'ngx-page-scroll-core';
export class NgxPageScrollDirective {
    /**
     * @param {?} pageScrollService
     * @param {?} router
     * @param {?} document
     */
    constructor(pageScrollService, router, document) {
        this.pageScrollService = pageScrollService;
        this.router = router;
        this.pageScrollAdjustHash = false;
        this.pageScrollFinish = new EventEmitter();
        this.document = (/** @type {?} */ (document));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // Some inputs changed, reset the pageScrollInstance
        this.pageScrollInstance = undefined;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.pageScrollInstance) {
            this.pageScrollService.stop(this.pageScrollInstance);
        }
    }
    /**
     * @private
     * @return {?}
     */
    generatePageScrollInstance() {
        if (this.pageScrollInstance === undefined || this.pageScrollInstance === null) {
            /** @type {?} */
            const options = {
                document: this.document,
                scrollTarget: this.pageScrollTarget || this.href,
            };
            if (this.pageScroll) {
                options.namespace = this.pageScroll;
            }
            if (this.pageScrollHorizontal !== undefined && this.pageScrollHorizontal !== null) {
                options.verticalScrolling = !this.pageScrollHorizontal;
            }
            if (this.pageScrollOffset !== undefined && this.pageScrollOffset !== null) {
                options.scrollOffset = this.pageScrollOffset;
            }
            if (this.pageScrollInterruptible !== undefined && this.pageScrollInterruptible !== null) {
                options.interruptible = this.pageScrollInterruptible;
            }
            if (this.pageScrollInView !== undefined && this.pageScrollInView !== null) {
                options.scrollInView = this.pageScrollInView;
            }
            if (this.pageScrollEasing) {
                options.easingLogic = this.pageScrollEasing;
            }
            if (this.pageScrollDuration !== undefined && this.pageScrollDuration !== null) {
                options.duration = this.pageScrollDuration;
            }
            if (this.pageScrollSpeed !== undefined && this.pageScrollSpeed !== null) {
                options.speed = this.pageScrollSpeed;
            }
            if (this.pageScrollFinish) {
                options.scrollFinishListener = this.pageScrollFinish;
            }
            this.pageScrollInstance = this.pageScrollService.create(options);
        }
        return this.pageScrollInstance;
    }
    /**
     * @private
     * @return {?}
     */
    pushRouterState() {
        if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.pageScrollOptions.scrollTarget === 'string'
            && ((/** @type {?} */ (this.pageScrollInstance.pageScrollOptions.scrollTarget))).substr(0, 1) === '#') {
            // "Navigate" to the current route again and this time set the fragment/hash
            this.router.navigate([], {
                fragment: ((/** @type {?} */ (this.pageScrollInstance.pageScrollOptions.scrollTarget))).substr(1),
                preserveQueryParams: true,
            });
        }
    }
    /**
     * @private
     * @return {?}
     */
    scroll() {
        /** @type {?} */
        const pageScrollInstance = this.generatePageScrollInstance();
        this.pushRouterState();
        this.pageScrollService.start(pageScrollInstance);
    }
    /**
     * @param {?} clickEvent
     * @return {?}
     */
    handleClick(clickEvent) {
        if (this.routerLink && this.router !== null && this.router !== undefined) {
            /** @type {?} */
            let urlTree;
            if (typeof this.routerLink === 'string') {
                urlTree = this.router.parseUrl(this.routerLink);
            }
            else {
                urlTree = this.router.createUrlTree(this.routerLink);
            }
            if (!this.router.isActive(urlTree, true)) {
                // We need to navigate their first.
                // Navigation is handled by the routerLink directive
                // so we only need to listen for route change
                /** @type {?} */
                const subscription = (/** @type {?} */ (this.router.events.subscribe((/**
                 * @param {?} routerEvent
                 * @return {?}
                 */
                (routerEvent) => {
                    if (routerEvent instanceof NavigationEnd) {
                        subscription.unsubscribe();
                        // use a timeout to start scrolling as soon as the stack is cleared
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            this.scroll();
                        }), 0);
                    }
                    else if (routerEvent instanceof NavigationError || routerEvent instanceof NavigationCancel) {
                        subscription.unsubscribe();
                    }
                }))));
                return false; // to preventDefault()
            }
        }
        this.scroll();
        return false; // to preventDefault()
    }
}
NgxPageScrollDirective.decorators = [
    { type: Directive, args: [{
                selector: '[pageScroll]',
                host: {
                    '(click)': 'handleClick($event)',
                },
            },] }
];
/** @nocollapse */
NgxPageScrollDirective.ctorParameters = () => [
    { type: PageScrollService },
    { type: Router, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
NgxPageScrollDirective.propDecorators = {
    routerLink: [{ type: Input }],
    href: [{ type: Input }],
    pageScrollTarget: [{ type: Input }],
    pageScrollHorizontal: [{ type: Input }],
    pageScrollOffset: [{ type: Input }],
    pageScrollDuration: [{ type: Input }],
    pageScrollSpeed: [{ type: Input }],
    pageScrollEasing: [{ type: Input }],
    pageScrollInterruptible: [{ type: Input }],
    pageScrollInView: [{ type: Input }],
    pageScrollAdjustHash: [{ type: Input }],
    pageScroll: [{ type: Input }],
    pageScrollFinish: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgxPageScrollDirective.prototype.routerLink;
    /** @type {?} */
    NgxPageScrollDirective.prototype.href;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollTarget;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollHorizontal;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollOffset;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollDuration;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollSpeed;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollEasing;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollInterruptible;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollInView;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollAdjustHash;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScroll;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollFinish;
    /**
     * @type {?}
     * @private
     */
    NgxPageScrollDirective.prototype.pageScrollInstance;
    /**
     * @type {?}
     * @private
     */
    NgxPageScrollDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    NgxPageScrollDirective.prototype.pageScrollService;
    /**
     * @type {?}
     * @private
     */
    NgxPageScrollDirective.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,