/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable:no-host-metadata-property directive-selector */
import { Directive, EventEmitter, Inject, Input, Optional, Output } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, Router } from '@angular/router';
import { DOCUMENT } from '@angular/common';
import { PageScrollService } from 'ngx-page-scroll-core';
var NgxPageScrollDirective = /** @class */ (function () {
    function NgxPageScrollDirective(pageScrollService, router, document) {
        this.pageScrollService = pageScrollService;
        this.router = router;
        this.pageScrollAdjustHash = false;
        this.pageScrollFinish = new EventEmitter();
        this.document = (/** @type {?} */ (document));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxPageScrollDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // Some inputs changed, reset the pageScrollInstance
        this.pageScrollInstance = undefined;
    };
    /**
     * @return {?}
     */
    NgxPageScrollDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.pageScrollInstance) {
            this.pageScrollService.stop(this.pageScrollInstance);
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxPageScrollDirective.prototype.generatePageScrollInstance = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.pageScrollInstance === undefined || this.pageScrollInstance === null) {
            /** @type {?} */
            var options = {
                document: this.document,
                scrollTarget: this.pageScrollTarget || this.href,
            };
            if (this.pageScroll) {
                options.namespace = this.pageScroll;
            }
            if (this.pageScrollHorizontal !== undefined && this.pageScrollHorizontal !== null) {
                options.verticalScrolling = !this.pageScrollHorizontal;
            }
            if (this.pageScrollOffset !== undefined && this.pageScrollOffset !== null) {
                options.scrollOffset = this.pageScrollOffset;
            }
            if (this.pageScrollInterruptible !== undefined && this.pageScrollInterruptible !== null) {
                options.interruptible = this.pageScrollInterruptible;
            }
            if (this.pageScrollInView !== undefined && this.pageScrollInView !== null) {
                options.scrollInView = this.pageScrollInView;
            }
            if (this.pageScrollEasing) {
                options.easingLogic = this.pageScrollEasing;
            }
            if (this.pageScrollDuration !== undefined && this.pageScrollDuration !== null) {
                options.duration = this.pageScrollDuration;
            }
            if (this.pageScrollSpeed !== undefined && this.pageScrollSpeed !== null) {
                options.speed = this.pageScrollSpeed;
            }
            if (this.pageScrollFinish) {
                options.scrollFinishListener = this.pageScrollFinish;
            }
            this.pageScrollInstance = this.pageScrollService.create(options);
        }
        return this.pageScrollInstance;
    };
    /**
     * @private
     * @return {?}
     */
    NgxPageScrollDirective.prototype.pushRouterState = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.pageScrollOptions.scrollTarget === 'string'
            && ((/** @type {?} */ (this.pageScrollInstance.pageScrollOptions.scrollTarget))).substr(0, 1) === '#') {
            // "Navigate" to the current route again and this time set the fragment/hash
            this.router.navigate([], {
                fragment: ((/** @type {?} */ (this.pageScrollInstance.pageScrollOptions.scrollTarget))).substr(1),
                preserveQueryParams: true,
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxPageScrollDirective.prototype.scroll = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var pageScrollInstance = this.generatePageScrollInstance();
        this.pushRouterState();
        this.pageScrollService.start(pageScrollInstance);
    };
    /**
     * @param {?} clickEvent
     * @return {?}
     */
    NgxPageScrollDirective.prototype.handleClick = /**
     * @param {?} clickEvent
     * @return {?}
     */
    function (clickEvent) {
        var _this = this;
        if (this.routerLink && this.router !== null && this.router !== undefined) {
            /** @type {?} */
            var urlTree = void 0;
            if (typeof this.routerLink === 'string') {
                urlTree = this.router.parseUrl(this.routerLink);
            }
            else {
                urlTree = this.router.createUrlTree(this.routerLink);
            }
            if (!this.router.isActive(urlTree, true)) {
                // We need to navigate their first.
                // Navigation is handled by the routerLink directive
                // so we only need to listen for route change
                /** @type {?} */
                var subscription_1 = (/** @type {?} */ (this.router.events.subscribe((/**
                 * @param {?} routerEvent
                 * @return {?}
                 */
                function (routerEvent) {
                    if (routerEvent instanceof NavigationEnd) {
                        subscription_1.unsubscribe();
                        // use a timeout to start scrolling as soon as the stack is cleared
                        setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            _this.scroll();
                        }), 0);
                    }
                    else if (routerEvent instanceof NavigationError || routerEvent instanceof NavigationCancel) {
                        subscription_1.unsubscribe();
                    }
                }))));
                return false; // to preventDefault()
            }
        }
        this.scroll();
        return false; // to preventDefault()
    };
    NgxPageScrollDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[pageScroll]',
                    host: {
                        '(click)': 'handleClick($event)',
                    },
                },] }
    ];
    /** @nocollapse */
    NgxPageScrollDirective.ctorParameters = function () { return [
        { type: PageScrollService },
        { type: Router, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    NgxPageScrollDirective.propDecorators = {
        routerLink: [{ type: Input }],
        href: [{ type: Input }],
        pageScrollTarget: [{ type: Input }],
        pageScrollHorizontal: [{ type: Input }],
        pageScrollOffset: [{ type: Input }],
        pageScrollDuration: [{ type: Input }],
        pageScrollSpeed: [{ type: Input }],
        pageScrollEasing: [{ type: Input }],
        pageScrollInterruptible: [{ type: Input }],
        pageScrollInView: [{ type: Input }],
        pageScrollAdjustHash: [{ type: Input }],
        pageScroll: [{ type: Input }],
        pageScrollFinish: [{ type: Output }]
    };
    return NgxPageScrollDirective;
}());
export { NgxPageScrollDirective };
if (false) {
    /** @type {?} */
    NgxPageScrollDirective.prototype.routerLink;
    /** @type {?} */
    NgxPageScrollDirective.prototype.href;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollTarget;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollHorizontal;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollOffset;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollDuration;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollSpeed;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollEasing;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollInterruptible;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollInView;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollAdjustHash;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScroll;
    /** @type {?} */
    NgxPageScrollDirective.prototype.pageScrollFinish;
    /**
     * @type {?}
     * @private
     */
    NgxPageScrollDirective.prototype.pageScrollInstance;
    /**
     * @type {?}
     * @private
     */
    NgxPageScrollDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    NgxPageScrollDirective.prototype.pageScrollService;
    /**
     * @type {?}
     * @private
     */
    NgxPageScrollDirective.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBhZ2Utc2Nyb2xsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wYWdlLXNjcm9sbC8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtcGFnZS1zY3JvbGwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFHTCxRQUFRLEVBQ1IsTUFBTSxFQUVQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBVyxNQUFNLGlCQUFpQixDQUFDO0FBQ3BHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUczQyxPQUFPLEVBQXNELGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFN0c7SUFrREUsZ0NBQW9CLGlCQUFvQyxFQUFzQixNQUFjLEVBQW9CLFFBQWE7UUFBekcsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUFzQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBWHJGLHlCQUFvQixHQUFHLEtBQUssQ0FBQztRQU1wQyxxQkFBZ0IsR0FBMEIsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQU1wRSxJQUFJLENBQUMsUUFBUSxHQUFHLG1CQUFVLFFBQVEsRUFBQSxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBRUQsNENBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLG9EQUFvRDtRQUNwRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFFRCw0Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMzQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ3REO0lBQ0gsQ0FBQzs7Ozs7SUFFTywyREFBMEI7Ozs7SUFB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LFdBQVcsRUFBRSxDQUFDO3FCQUM1QjtnQkFDSCxDQUFDLEVBQUMsRUFBQTtnQkFFRixPQUFPLEtBQUssQ0FBQyxDQUFDLHNCQUFzQjthQUNyQztTQUNGO1FBQ0QsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWQsT0FBTyxLQUFLLENBQUMsQ0FBQyxzQkFBc0I7SUFDdEMsQ0FBQzs7Z0JBeEpGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsSUFBSSxFQUFFO3dCQUNKLFNBQVMsRUFBRSxxQkFBcUI7cUJBQ2pDO2lCQUNGOzs7O2dCQVA0RCxpQkFBaUI7Z0JBSm5CLE1BQU0sdUJBd0RKLFFBQVE7Z0RBQTRCLE1BQU0sU0FBQyxRQUFROzs7NkJBMUM3RyxLQUFLO3VCQUdMLEtBQUs7bUNBR0wsS0FBSzt1Q0FHTCxLQUFLO21DQUdMLEtBQUs7cUNBR0wsS0FBSztrQ0FHTCxLQUFLO21DQUdMLEtBQUs7MENBR0wsS0FBSzttQ0FHTCxLQUFLO3VDQUdMLEtBQUs7NkJBR0wsS0FBSzttQ0FHTCxNQUFNOztJQTZHVCw2QkFBQztDQUFBLEFBekpELElBeUpDO1NBbkpZLHNCQUFzQjs7O0lBRWpDLDRDQUN1Qjs7SUFFdkIsc0NBQ29COztJQUVwQixrREFDZ0M7O0lBRWhDLHNEQUNxQzs7SUFFckMsa0RBQ2dDOztJQUVoQyxvREFDa0M7O0lBRWxDLGlEQUMrQjs7SUFFL0Isa0RBQ3FDOztJQUVyQyx5REFDd0M7O0lBRXhDLGtEQUNpQzs7SUFFakMsc0RBQ29DOztJQUVwQyw0Q0FDMEI7O0lBRTFCLGtEQUNzRTs7Ozs7SUFFdEUsb0RBQStDOzs7OztJQUMvQywwQ0FBMkI7Ozs7O0lBRWYsbURBQTRDOzs7OztJQUFFLHdDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm5vLWhvc3QtbWV0YWRhdGEtcHJvcGVydHkgZGlyZWN0aXZlLXNlbGVjdG9yICovXG5cbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT3B0aW9uYWwsXG4gIE91dHB1dCxcbiAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5hdmlnYXRpb25DYW5jZWwsIE5hdmlnYXRpb25FbmQsIE5hdmlnYXRpb25FcnJvciwgUm91dGVyLCBVcmxUcmVlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBFYXNpbmdMb2dpYywgUGFnZVNjcm9sbEluc3RhbmNlLCBQYWdlU2Nyb2xsT3B0aW9ucywgUGFnZVNjcm9sbFNlcnZpY2UgfSBmcm9tICduZ3gtcGFnZS1zY3JvbGwtY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1twYWdlU2Nyb2xsXScsXG4gIGhvc3Q6IHtcbiAgICAnKGNsaWNrKSc6ICdoYW5kbGVDbGljaygkZXZlbnQpJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTmd4UGFnZVNjcm9sbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgcm91dGVyTGluazogYW55O1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBocmVmOiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgcHVibGljIHBhZ2VTY3JvbGxUYXJnZXQ6IHN0cmluZztcblxuICBASW5wdXQoKVxuICBwdWJsaWMgcGFnZVNjcm9sbEhvcml6b250YWw6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgcHVibGljIHBhZ2VTY3JvbGxPZmZzZXQ6IG51bWJlcjtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgcGFnZVNjcm9sbER1cmF0aW9uOiBudW1iZXI7XG5cbiAgQElucHV0KClcbiAgcHVibGljIHBhZ2VTY3JvbGxTcGVlZDogbnVtYmVyO1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBwYWdlU2Nyb2xsRWFzaW5nOiBFYXNpbmdMb2dpYztcblxuICBASW5wdXQoKVxuICBwdWJsaWMgcGFnZVNjcm9sbEludGVycnVwdGlibGU6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgcHVibGljIHBhZ2VTY3JvbGxJblZpZXc6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgcHVibGljIHBhZ2VTY3JvbGxBZGp1c3RIYXNoID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgcHVibGljIHBhZ2VTY3JvbGw6IHN0cmluZztcblxuICBAT3V0cHV0KClcbiAgcGFnZVNjcm9sbEZpbmlzaDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIHByaXZhdGUgcGFnZVNjcm9sbEluc3RhbmNlOiBQYWdlU2Nyb2xsSW5zdGFuY2U7XG4gIHByaXZhdGUgZG9jdW1lbnQ6IERvY3VtZW50O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGFnZVNjcm9sbFNlcnZpY2U6IFBhZ2VTY3JvbGxTZXJ2aWNlLCBAT3B0aW9uYWwoKSBwcml2YXRlIHJvdXRlcjogUm91dGVyLCBASW5qZWN0KERPQ1VNRU5UKSBkb2N1bWVudDogYW55KSB7XG4gICAgdGhpcy5kb2N1bWVudCA9IDxEb2N1bWVudD5kb2N1bWVudDtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICAvLyBTb21lIGlucHV0cyBjaGFuZ2VkLCByZXNldCB0aGUgcGFnZVNjcm9sbEluc3RhbmNlXG4gICAgdGhpcy5wYWdlU2Nyb2xsSW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5wYWdlU2Nyb2xsSW5zdGFuY2UpIHtcbiAgICAgIHRoaXMucGFnZVNjcm9sbFNlcnZpY2Uuc3RvcCh0aGlzLnBhZ2VTY3JvbGxJbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVBhZ2VTY3JvbGxJbnN0YW5jZSgpOiBQYWdlU2Nyb2xsSW5zdGFuY2Uge1xuICAgIGlmICh0aGlzLnBhZ2VTY3JvbGxJbnN0YW5jZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMucGFnZVNjcm9sbEluc3RhbmNlID09PSBudWxsKSB7XG4gICAgICBjb25zdCBvcHRpb25zOiBQYWdlU2Nyb2xsT3B0aW9ucyA9IHtcbiAgICAgICAgZG9jdW1lbnQ6IHRoaXMuZG9jdW1lbnQsXG4gICAgICAgIHNjcm9sbFRhcmdldDogdGhpcy5wYWdlU2Nyb2xsVGFyZ2V0IHx8IHRoaXMuaHJlZixcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLnBhZ2VTY3JvbGwpIHtcbiAgICAgICAgb3B0aW9ucy5uYW1lc3BhY2UgPSB0aGlzLnBhZ2VTY3JvbGw7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wYWdlU2Nyb2xsSG9yaXpvbnRhbCAhPT0gdW5kZWZpbmVkICYmIHRoaXMucGFnZVNjcm9sbEhvcml6b250YWwgIT09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucy52ZXJ0aWNhbFNjcm9sbGluZyA9ICF0aGlzLnBhZ2VTY3JvbGxIb3Jpem9udGFsO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucGFnZVNjcm9sbE9mZnNldCAhPT0gdW5kZWZpbmVkICYmIHRoaXMucGFnZVNjcm9sbE9mZnNldCAhPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLnNjcm9sbE9mZnNldCA9IHRoaXMucGFnZVNjcm9sbE9mZnNldDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnBhZ2VTY3JvbGxJbnRlcnJ1cHRpYmxlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5wYWdlU2Nyb2xsSW50ZXJydXB0aWJsZSAhPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLmludGVycnVwdGlibGUgPSB0aGlzLnBhZ2VTY3JvbGxJbnRlcnJ1cHRpYmxlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucGFnZVNjcm9sbEluVmlldyAhPT0gdW5kZWZpbmVkICYmIHRoaXMucGFnZVNjcm9sbEluVmlldyAhPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLnNjcm9sbEluVmlldyA9IHRoaXMucGFnZVNjcm9sbEluVmlldztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnBhZ2VTY3JvbGxFYXNpbmcpIHtcbiAgICAgICAgb3B0aW9ucy5lYXNpbmdMb2dpYyA9IHRoaXMucGFnZVNjcm9sbEVhc2luZztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnBhZ2VTY3JvbGxEdXJhdGlvbiAhPT0gdW5kZWZpbmVkICYmIHRoaXMucGFnZVNjcm9sbER1cmF0aW9uICE9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMuZHVyYXRpb24gPSB0aGlzLnBhZ2VTY3JvbGxEdXJhdGlvbjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnBhZ2VTY3JvbGxTcGVlZCAhPT0gdW5kZWZpbmVkICYmIHRoaXMucGFnZVNjcm9sbFNwZWVkICE9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMuc3BlZWQgPSB0aGlzLnBhZ2VTY3JvbGxTcGVlZDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnBhZ2VTY3JvbGxGaW5pc2gpIHtcbiAgICAgICAgb3B0aW9ucy5zY3JvbGxGaW5pc2hMaXN0ZW5lciA9IHRoaXMucGFnZVNjcm9sbEZpbmlzaDtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFnZVNjcm9sbEluc3RhbmNlID0gdGhpcy5wYWdlU2Nyb2xsU2VydmljZS5jcmVhdGUob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFnZVNjcm9sbEluc3RhbmNlO1xuICB9XG5cbiAgcHJpdmF0ZSBwdXNoUm91dGVyU3RhdGUoKSB7XG4gICAgaWYgKHRoaXMucGFnZVNjcm9sbEFkanVzdEhhc2ggJiYgdHlwZW9mIHRoaXMucGFnZVNjcm9sbEluc3RhbmNlLnBhZ2VTY3JvbGxPcHRpb25zLnNjcm9sbFRhcmdldCA9PT0gJ3N0cmluZydcbiAgICAgICYmICg8c3RyaW5nPnRoaXMucGFnZVNjcm9sbEluc3RhbmNlLnBhZ2VTY3JvbGxPcHRpb25zLnNjcm9sbFRhcmdldCkuc3Vic3RyKDAsIDEpID09PSAnIycpIHtcbiAgICAgIC8vIFwiTmF2aWdhdGVcIiB0byB0aGUgY3VycmVudCByb3V0ZSBhZ2FpbiBhbmQgdGhpcyB0aW1lIHNldCB0aGUgZnJhZ21lbnQvaGFzaFxuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW10sIHtcbiAgICAgICAgZnJhZ21lbnQ6ICg8c3RyaW5nPnRoaXMucGFnZVNjcm9sbEluc3RhbmNlLnBhZ2VTY3JvbGxPcHRpb25zLnNjcm9sbFRhcmdldCkuc3Vic3RyKDEpLFxuICAgICAgICBwcmVzZXJ2ZVF1ZXJ5UGFyYW1zOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzY3JvbGwoKTogdm9pZCB7XG4gICAgY29uc3QgcGFnZVNjcm9sbEluc3RhbmNlID0gdGhpcy5nZW5lcmF0ZVBhZ2VTY3JvbGxJbnN0YW5jZSgpO1xuICAgIHRoaXMucHVzaFJvdXRlclN0YXRlKCk7XG4gICAgdGhpcy5wYWdlU2Nyb2xsU2VydmljZS5zdGFydChwYWdlU2Nyb2xsSW5zdGFuY2UpO1xuICB9XG5cbiAgcHVibGljIGhhbmRsZUNsaWNrKGNsaWNrRXZlbnQ6IEV2ZW50KTogYm9vbGVhbiB7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tdW51c2VkLXZhcmlhYmxlXG4gICAgaWYgKHRoaXMucm91dGVyTGluayAmJiB0aGlzLnJvdXRlciAhPT0gbnVsbCAmJiB0aGlzLnJvdXRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdXJsVHJlZTogVXJsVHJlZTtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5yb3V0ZXJMaW5rID09PSAnc3RyaW5nJykge1xuICAgICAgICB1cmxUcmVlID0gdGhpcy5yb3V0ZXIucGFyc2VVcmwodGhpcy5yb3V0ZXJMaW5rKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybFRyZWUgPSB0aGlzLnJvdXRlci5jcmVhdGVVcmxUcmVlKHRoaXMucm91dGVyTGluayk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMucm91dGVyLmlzQWN0aXZlKHVybFRyZWUsIHRydWUpKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gbmF2aWdhdGUgdGhlaXIgZmlyc3QuXG4gICAgICAgIC8vIE5hdmlnYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgcm91dGVyTGluayBkaXJlY3RpdmVcbiAgICAgICAgLy8gc28gd2Ugb25seSBuZWVkIHRvIGxpc3RlbiBmb3Igcm91dGUgY2hhbmdlXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uID0gPFN1YnNjcmlwdGlvbj50aGlzLnJvdXRlci5ldmVudHMuc3Vic2NyaWJlKChyb3V0ZXJFdmVudCkgPT4ge1xuICAgICAgICAgIGlmIChyb3V0ZXJFdmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgLy8gdXNlIGEgdGltZW91dCB0byBzdGFydCBzY3JvbGxpbmcgYXMgc29vbiBhcyB0aGUgc3RhY2sgaXMgY2xlYXJlZFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuc2Nyb2xsKCk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJvdXRlckV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVycm9yIHx8IHJvdXRlckV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkNhbmNlbCkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIHRvIHByZXZlbnREZWZhdWx0KClcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zY3JvbGwoKTtcblxuICAgIHJldHVybiBmYWxzZTsgLy8gdG8gcHJldmVudERlZmF1bHQoKVxuICB9XG59XG4iXX0=