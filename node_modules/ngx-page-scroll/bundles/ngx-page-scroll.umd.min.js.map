{"version":3,"sources":["ng://ngx-page-scroll/lib/ngx-page-scroll.directive.ts","ng://ngx-page-scroll/lib/ngx-page-scroll.module.ts"],"names":["NgxPageScrollDirective","pageScrollService","router","document","this","pageScrollAdjustHash","pageScrollFinish","EventEmitter","prototype","ngOnChanges","changes","pageScrollInstance","undefined","ngOnDestroy","stop","generatePageScrollInstance","options","scrollTarget","pageScrollTarget","href","pageScroll","namespace","pageScrollHorizontal","verticalScrolling","pageScrollOffset","scrollOffset","pageScrollInterruptible","interruptible","pageScrollInView","scrollInView","pageScrollEasing","easingLogic","pageScrollDuration","duration","pageScrollSpeed","speed","scrollFinishListener","create","pushRouterState","pageScrollOptions","substr","navigate","fragment","preserveQueryParams","scroll","start","handleClick","clickEvent","_this","routerLink","urlTree","parseUrl","createUrlTree","isActive","subscription_1","events","subscribe","routerEvent","NavigationEnd","unsubscribe","setTimeout","NavigationError","NavigationCancel","Directive","args","selector","host","(click)","PageScrollService","Router","decorators","type","Optional","Inject","DOCUMENT","Input","Output","NgxPageScrollModule","NgModule","declarations","imports","NgxPageScrollCoreModule","exports"],"mappings":"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","sourcesContent":["/* tslint:disable:no-host-metadata-property directive-selector */\n\nimport {\n  Directive,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { NavigationCancel, NavigationEnd, NavigationError, Router, UrlTree } from '@angular/router';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Subscription } from 'rxjs';\nimport { EasingLogic, PageScrollInstance, PageScrollOptions, PageScrollService } from 'ngx-page-scroll-core';\n\n@Directive({\n  selector: '[pageScroll]',\n  host: {\n    '(click)': 'handleClick($event)',\n  },\n})\nexport class NgxPageScrollDirective implements OnChanges, OnDestroy {\n\n  @Input()\n  public routerLink: any;\n\n  @Input()\n  public href: string;\n\n  @Input()\n  public pageScrollTarget: string;\n\n  @Input()\n  public pageScrollHorizontal: boolean;\n\n  @Input()\n  public pageScrollOffset: number;\n\n  @Input()\n  public pageScrollDuration: number;\n\n  @Input()\n  public pageScrollSpeed: number;\n\n  @Input()\n  public pageScrollEasing: EasingLogic;\n\n  @Input()\n  public pageScrollInterruptible: boolean;\n\n  @Input()\n  public pageScrollInView: boolean;\n\n  @Input()\n  public pageScrollAdjustHash = false;\n\n  @Input()\n  public pageScroll: string;\n\n  @Output()\n  pageScrollFinish: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  private pageScrollInstance: PageScrollInstance;\n  private document: Document;\n\n  constructor(private pageScrollService: PageScrollService, @Optional() private router: Router, @Inject(DOCUMENT) document: any) {\n    this.document = <Document>document;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // Some inputs changed, reset the pageScrollInstance\n    this.pageScrollInstance = undefined;\n  }\n\n  ngOnDestroy(): void {\n    if (this.pageScrollInstance) {\n      this.pageScrollService.stop(this.pageScrollInstance);\n    }\n  }\n\n  private generatePageScrollInstance(): PageScrollInstance {\n    if (this.pageScrollInstance === undefined || this.pageScrollInstance === null) {\n      const options: PageScrollOptions = {\n        document: this.document,\n        scrollTarget: this.pageScrollTarget || this.href,\n      };\n\n      if (this.pageScroll) {\n        options.namespace = this.pageScroll;\n      }\n      if (this.pageScrollHorizontal !== undefined && this.pageScrollHorizontal !== null) {\n        options.verticalScrolling = !this.pageScrollHorizontal;\n      }\n      if (this.pageScrollOffset !== undefined && this.pageScrollOffset !== null) {\n        options.scrollOffset = this.pageScrollOffset;\n      }\n      if (this.pageScrollInterruptible !== undefined && this.pageScrollInterruptible !== null) {\n        options.interruptible = this.pageScrollInterruptible;\n      }\n      if (this.pageScrollInView !== undefined && this.pageScrollInView !== null) {\n        options.scrollInView = this.pageScrollInView;\n      }\n      if (this.pageScrollEasing) {\n        options.easingLogic = this.pageScrollEasing;\n      }\n      if (this.pageScrollDuration !== undefined && this.pageScrollDuration !== null) {\n        options.duration = this.pageScrollDuration;\n      }\n      if (this.pageScrollSpeed !== undefined && this.pageScrollSpeed !== null) {\n        options.speed = this.pageScrollSpeed;\n      }\n      if (this.pageScrollFinish) {\n        options.scrollFinishListener = this.pageScrollFinish;\n      }\n      this.pageScrollInstance = this.pageScrollService.create(options);\n    }\n\n    return this.pageScrollInstance;\n  }\n\n  private pushRouterState() {\n    if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.pageScrollOptions.scrollTarget === 'string'\n      && (<string>this.pageScrollInstance.pageScrollOptions.scrollTarget).substr(0, 1) === '#') {\n      // \"Navigate\" to the current route again and this time set the fragment/hash\n      this.router.navigate([], {\n        fragment: (<string>this.pageScrollInstance.pageScrollOptions.scrollTarget).substr(1),\n        preserveQueryParams: true,\n      });\n    }\n  }\n\n  private scroll(): void {\n    const pageScrollInstance = this.generatePageScrollInstance();\n    this.pushRouterState();\n    this.pageScrollService.start(pageScrollInstance);\n  }\n\n  public handleClick(clickEvent: Event): boolean { // tslint:disable-line:no-unused-variable\n    if (this.routerLink && this.router !== null && this.router !== undefined) {\n      let urlTree: UrlTree;\n      if (typeof this.routerLink === 'string') {\n        urlTree = this.router.parseUrl(this.routerLink);\n      } else {\n        urlTree = this.router.createUrlTree(this.routerLink);\n      }\n      if (!this.router.isActive(urlTree, true)) {\n        // We need to navigate their first.\n        // Navigation is handled by the routerLink directive\n        // so we only need to listen for route change\n        const subscription: Subscription = <Subscription>this.router.events.subscribe((routerEvent) => {\n          if (routerEvent instanceof NavigationEnd) {\n            subscription.unsubscribe();\n            // use a timeout to start scrolling as soon as the stack is cleared\n            setTimeout(() => {\n              this.scroll();\n            }, 0);\n          } else if (routerEvent instanceof NavigationError || routerEvent instanceof NavigationCancel) {\n            subscription.unsubscribe();\n          }\n        });\n\n        return false; // to preventDefault()\n      }\n    }\n    this.scroll();\n\n    return false; // to preventDefault()\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { NgxPageScrollCoreModule } from 'ngx-page-scroll-core';\n\nimport { NgxPageScrollDirective } from './ngx-page-scroll.directive';\n\n@NgModule({\n  declarations: [\n    NgxPageScrollDirective,\n  ],\n  imports: [\n    NgxPageScrollCoreModule,\n  ],\n  exports: [\n    NgxPageScrollDirective,\n  ],\n})\nexport class NgxPageScrollModule {\n}\n"]}