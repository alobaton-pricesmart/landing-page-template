{"version":3,"file":"ngx-page-scroll.js","sources":["ng://ngx-page-scroll/lib/ngx-page-scroll.directive.ts","ng://ngx-page-scroll/lib/ngx-page-scroll.module.ts"],"sourcesContent":["/* tslint:disable:no-host-metadata-property directive-selector */\n\nimport {\n  Directive,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { NavigationCancel, NavigationEnd, NavigationError, Router, UrlTree } from '@angular/router';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Subscription } from 'rxjs';\nimport { EasingLogic, PageScrollInstance, PageScrollOptions, PageScrollService } from 'ngx-page-scroll-core';\n\n@Directive({\n  selector: '[pageScroll]',\n  host: {\n    '(click)': 'handleClick($event)',\n  },\n})\nexport class NgxPageScrollDirective implements OnChanges, OnDestroy {\n\n  @Input()\n  public routerLink: any;\n\n  @Input()\n  public href: string;\n\n  @Input()\n  public pageScrollTarget: string;\n\n  @Input()\n  public pageScrollHorizontal: boolean;\n\n  @Input()\n  public pageScrollOffset: number;\n\n  @Input()\n  public pageScrollDuration: number;\n\n  @Input()\n  public pageScrollSpeed: number;\n\n  @Input()\n  public pageScrollEasing: EasingLogic;\n\n  @Input()\n  public pageScrollInterruptible: boolean;\n\n  @Input()\n  public pageScrollInView: boolean;\n\n  @Input()\n  public pageScrollAdjustHash = false;\n\n  @Input()\n  public pageScroll: string;\n\n  @Output()\n  pageScrollFinish: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  private pageScrollInstance: PageScrollInstance;\n  private document: Document;\n\n  constructor(private pageScrollService: PageScrollService, @Optional() private router: Router, @Inject(DOCUMENT) document: any) {\n    this.document = <Document>document;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // Some inputs changed, reset the pageScrollInstance\n    this.pageScrollInstance = undefined;\n  }\n\n  ngOnDestroy(): void {\n    if (this.pageScrollInstance) {\n      this.pageScrollService.stop(this.pageScrollInstance);\n    }\n  }\n\n  private generatePageScrollInstance(): PageScrollInstance {\n    if (this.pageScrollInstance === undefined || this.pageScrollInstance === null) {\n      const options: PageScrollOptions = {\n        document: this.document,\n        scrollTarget: this.pageScrollTarget || this.href,\n      };\n\n      if (this.pageScroll) {\n        options.namespace = this.pageScroll;\n      }\n      if (this.pageScrollHorizontal !== undefined && this.pageScrollHorizontal !== null) {\n        options.verticalScrolling = !this.pageScrollHorizontal;\n      }\n      if (this.pageScrollOffset !== undefined && this.pageScrollOffset !== null) {\n        options.scrollOffset = this.pageScrollOffset;\n      }\n      if (this.pageScrollInterruptible !== undefined && this.pageScrollInterruptible !== null) {\n        options.interruptible = this.pageScrollInterruptible;\n      }\n      if (this.pageScrollInView !== undefined && this.pageScrollInView !== null) {\n        options.scrollInView = this.pageScrollInView;\n      }\n      if (this.pageScrollEasing) {\n        options.easingLogic = this.pageScrollEasing;\n      }\n      if (this.pageScrollDuration !== undefined && this.pageScrollDuration !== null) {\n        options.duration = this.pageScrollDuration;\n      }\n      if (this.pageScrollSpeed !== undefined && this.pageScrollSpeed !== null) {\n        options.speed = this.pageScrollSpeed;\n      }\n      if (this.pageScrollFinish) {\n        options.scrollFinishListener = this.pageScrollFinish;\n      }\n      this.pageScrollInstance = this.pageScrollService.create(options);\n    }\n\n    return this.pageScrollInstance;\n  }\n\n  private pushRouterState() {\n    if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.pageScrollOptions.scrollTarget === 'string'\n      && (<string>this.pageScrollInstance.pageScrollOptions.scrollTarget).substr(0, 1) === '#') {\n      // \"Navigate\" to the current route again and this time set the fragment/hash\n      this.router.navigate([], {\n        fragment: (<string>this.pageScrollInstance.pageScrollOptions.scrollTarget).substr(1),\n        preserveQueryParams: true,\n      });\n    }\n  }\n\n  private scroll(): void {\n    const pageScrollInstance = this.generatePageScrollInstance();\n    this.pushRouterState();\n    this.pageScrollService.start(pageScrollInstance);\n  }\n\n  public handleClick(clickEvent: Event): boolean { // tslint:disable-line:no-unused-variable\n    if (this.routerLink && this.router !== null && this.router !== undefined) {\n      let urlTree: UrlTree;\n      if (typeof this.routerLink === 'string') {\n        urlTree = this.router.parseUrl(this.routerLink);\n      } else {\n        urlTree = this.router.createUrlTree(this.routerLink);\n      }\n      if (!this.router.isActive(urlTree, true)) {\n        // We need to navigate their first.\n        // Navigation is handled by the routerLink directive\n        // so we only need to listen for route change\n        const subscription: Subscription = <Subscription>this.router.events.subscribe((routerEvent) => {\n          if (routerEvent instanceof NavigationEnd) {\n            subscription.unsubscribe();\n            // use a timeout to start scrolling as soon as the stack is cleared\n            setTimeout(() => {\n              this.scroll();\n            }, 0);\n          } else if (routerEvent instanceof NavigationError || routerEvent instanceof NavigationCancel) {\n            subscription.unsubscribe();\n          }\n        });\n\n        return false; // to preventDefault()\n      }\n    }\n    this.scroll();\n\n    return false; // to preventDefault()\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { NgxPageScrollCoreModule } from 'ngx-page-scroll-core';\n\nimport { NgxPageScrollDirective } from './ngx-page-scroll.directive';\n\n@NgModule({\n  declarations: [\n    NgxPageScrollDirective,\n  ],\n  imports: [\n    NgxPageScrollCoreModule,\n  ],\n  exports: [\n    NgxPageScrollDirective,\n  ],\n})\nexport class NgxPageScrollModule {\n}\n"],"names":[],"mappings":"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"}